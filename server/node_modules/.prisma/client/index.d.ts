import {
  DMMF,
  DMMFClass,
  Engine,
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  sqltag as sql,
  empty,
  join,
  raw,
} from '@prisma/client/runtime';

export { PrismaClientKnownRequestError }
export { PrismaClientUnknownRequestError }
export { PrismaClientRustPanicError }
export { PrismaClientInitializationError }
export { PrismaClientValidationError }

/**
 * Re-export of sql-template-tag
 */
export { sql, empty, join, raw }

/**
 * Prisma Client JS version: 2.0.0-beta.7
 * Query Engine version: 5d39801acf2e3475bd9dab029a63634358b07bf1
 */
export declare type PrismaVersion = {
  client: string
}

export declare const prismaVersion: PrismaVersion 

/**
 * Utility Types
 */

/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON object.
 * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
 */
declare type JsonObject = {[Key in string]?: JsonValue}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON array.
 */
declare interface JsonArray extends Array<JsonValue> {}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches any valid JSON value.
 */
declare type JsonValue = string | number | boolean | null | Date | JsonObject | JsonArray
 
declare type SelectAndInclude = {
  select: any
  include: any
}

declare type HasSelect = {
  select: any
}

declare type HasInclude = {
  include: any
}

declare type CheckSelect<T, S, U> = T extends SelectAndInclude
  ? 'Please either choose `select` or `include`'
  : T extends HasSelect
  ? U
  : T extends HasInclude
  ? U
  : S

/**
 * Get the type of the value, that the Promise holds.
 */
export declare type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

/**
 * Get the return type of a function which returns a Promise.
 */
export declare type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


export declare type Enumerable<T> = T | Array<T>;

export declare type TrueKeys<T> = {
  [key in keyof T]: T[key] extends false | undefined | null ? never : key
}[keyof T]

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export declare type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};
declare class PrismaClientFetcher {
  private readonly prisma;
  private readonly debug;
  private readonly hooks?;
  constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
  request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string, collectTimestamps?: any): Promise<T>;
  sanitizeMessage(message: string): string;
  protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
}


/**
 * Client
**/


export type Datasources = {
  db?: string
}

export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your prisma.schema file
   */
  datasources?: Datasources

  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat

  /**
   * @example
   * ```
   * // Defaults to stdout
   * log: ['query', 'info', 'warn']
   * 
   * // Emit as events
   * log: [
   *  { emit: 'stdout', level: 'query' },
   *  { emit: 'stdout', level: 'info' },
   *  { emit: 'stdout', level: 'warn' }
   * ]
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: Array<LogLevel | LogDefinition>

  /**
   * You probably don't want to use this. `__internal` is used by internal tooling.
   */
  __internal?: {
    debug?: boolean
    hooks?: Hooks
    engine?: {
      cwd?: string
      binaryPath?: string
    }
    measurePerformance?: boolean
  }
}

export type Hooks = {
  beforeRequest?: (options: {query: string, path: string[], rootField?: string, typeName?: string, document: any}) => any
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
export type GetEvents<T extends Array<LogLevel | LogDefinition>> = GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]>

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */

// tested in getLogLevel.test.ts
export declare function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more BOOKS
 * const bOOKS = await prisma.bOOK.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://github.com/prisma/prisma/blob/master/docs/prisma-client-js/api.md).
 */
export declare class PrismaClient<T extends PrismaClientOptions = {}, U = keyof T extends 'log' ? T['log'] extends Array<LogLevel | LogDefinition> ? GetEvents<T['log']> : never : never> {
  /**
   * @private
   */
  private fetcher;
  /**
   * @private
   */
  private readonly dmmf;
  /**
   * @private
   */
  private connectionPromise?;
  /**
   * @private
   */
  private disconnectionPromise?;
  /**
   * @private
   */
  private readonly engineConfig;
  /**
   * @private
   */
  private readonly measurePerformance;
  /**
   * @private
   */
  private engine: Engine;
  /**
   * @private
   */
  private errorFormat: ErrorFormat;

  /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more BOOKS
   * const bOOKS = await prisma.bOOK.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://github.com/prisma/prisma/blob/master/docs/prisma-client-js/api.md).
   */
  constructor(optionsArg?: T);
  on<V extends U>(eventType: V, callback: V extends never ? never : (event: V extends 'query' ? QueryEvent : LogEvent) => void): void;
  /**
   * Connect with the database
   */
  connect(): Promise<void>;
  /**
   * @private
   */
  private runDisconnect;
  /**
   * Disconnect from the database
   */
  disconnect(): Promise<any>;
  /**
   * Makes a raw query
   * @example
   * ```
   * // With parameters use prisma.raw``, values will be escaped automatically
   * const result = await prisma.raw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.raw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://github.com/prisma/prisma/blob/master/docs/prisma-client-js/api.md#raw-database-access).
  */
  raw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<T>;

  /**
   * `prisma.bOOK`: Exposes CRUD operations for the **BOOK** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BOOKS
    * const bOOKS = await prisma.bOOK.findMany()
    * ```
    */
  get bOOK(): BOOKDelegate;

  /**
   * `prisma.cATEGORY`: Exposes CRUD operations for the **CATEGORY** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CATEGORIES
    * const cATEGORIES = await prisma.cATEGORY.findMany()
    * ```
    */
  get cATEGORY(): CATEGORYDelegate;

  /**
   * `prisma.lIBRARY`: Exposes CRUD operations for the **LIBRARY** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LIBRARIES
    * const lIBRARIES = await prisma.lIBRARY.findMany()
    * ```
    */
  get lIBRARY(): LIBRARYDelegate;

  /**
   * `prisma.lIB_OWN_BOOK`: Exposes CRUD operations for the **LIB_OWN_BOOK** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LIB_OWN_BOOKS
    * const lIB_OWN_BOOKS = await prisma.lIB_OWN_BOOK.findMany()
    * ```
    */
  get lIB_OWN_BOOK(): LIB_OWN_BOOKDelegate;

  /**
   * `prisma.lOG`: Exposes CRUD operations for the **LOG** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LOGS
    * const lOGS = await prisma.lOG.findMany()
    * ```
    */
  get lOG(): LOGDelegate;

  /**
   * `prisma.uSER`: Exposes CRUD operations for the **USER** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more USERS
    * const uSERS = await prisma.uSER.findMany()
    * ```
    */
  get uSER(): USERDelegate;

  /**
   * `prisma.user_BOOK`: Exposes CRUD operations for the **User_BOOK** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more User_BOOKS
    * const user_BOOKS = await prisma.user_BOOK.findMany()
    * ```
    */
  get user_BOOK(): User_BOOKDelegate;
}



/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export declare const OrderByArg: {
  asc: 'asc',
  desc: 'desc'
};

export declare type OrderByArg = (typeof OrderByArg)[keyof typeof OrderByArg]



/**
 * Model BOOK
 */

export type BOOK = {
  book_author: string | null
  book_category: number
  book_name: string
  book_num: number
  book_picture: string | null
  book_publisher: string | null
  book_side_pic: string | null
  book_year: string | null
}

export type BOOKSelect = {
  book_author?: boolean
  book_category?: boolean
  book_name?: boolean
  book_num?: boolean
  book_picture?: boolean
  book_publisher?: boolean
  book_side_pic?: boolean
  book_year?: boolean
  CATEGORY?: boolean | CATEGORYArgs
  LIB_OWN_BOOK?: boolean | FindManyLIB_OWN_BOOKArgs
  LOG_BOOKToLOG_book_category?: boolean | FindManyLOGArgs
  LOG_BOOKToLOG_book_num?: boolean | FindManyLOGArgs
  USER?: boolean | FindManyUSERArgs
  User_BOOK?: boolean | FindManyUser_BOOKArgs
}

export type BOOKInclude = {
  CATEGORY?: boolean | CATEGORYArgs
  LIB_OWN_BOOK?: boolean | FindManyLIB_OWN_BOOKArgs
  LOG_BOOKToLOG_book_category?: boolean | FindManyLOGArgs
  LOG_BOOKToLOG_book_num?: boolean | FindManyLOGArgs
  USER?: boolean | FindManyUSERArgs
  User_BOOK?: boolean | FindManyUser_BOOKArgs
}

export type BOOKGetPayload<
  S extends boolean | null | undefined | BOOKArgs,
  U = keyof S
> = S extends true
  ? BOOK
  : S extends undefined
  ? never
  : S extends BOOKArgs | FindManyBOOKArgs
  ? 'include' extends U
    ? BOOK  & {
      [P in TrueKeys<S['include']>]:
      P extends 'CATEGORY'
      ? CATEGORYGetPayload<S['include'][P]> :
      P extends 'LIB_OWN_BOOK'
      ? Array<LIB_OWN_BOOKGetPayload<S['include'][P]>> :
      P extends 'LOG_BOOKToLOG_book_category'
      ? Array<LOGGetPayload<S['include'][P]>> :
      P extends 'LOG_BOOKToLOG_book_num'
      ? Array<LOGGetPayload<S['include'][P]>> :
      P extends 'USER'
      ? Array<USERGetPayload<S['include'][P]>> :
      P extends 'User_BOOK'
      ? Array<User_BOOKGetPayload<S['include'][P]>> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof BOOK ? BOOK[P]
: 
      P extends 'CATEGORY'
      ? CATEGORYGetPayload<S['select'][P]> :
      P extends 'LIB_OWN_BOOK'
      ? Array<LIB_OWN_BOOKGetPayload<S['select'][P]>> :
      P extends 'LOG_BOOKToLOG_book_category'
      ? Array<LOGGetPayload<S['select'][P]>> :
      P extends 'LOG_BOOKToLOG_book_num'
      ? Array<LOGGetPayload<S['select'][P]>> :
      P extends 'USER'
      ? Array<USERGetPayload<S['select'][P]>> :
      P extends 'User_BOOK'
      ? Array<User_BOOKGetPayload<S['select'][P]>> : never
    }
  : BOOK
: BOOK


export interface BOOKDelegate {
  /**
   * Find zero or one BOOK.
   * @param {FindOneBOOKArgs} args - Arguments to find a BOOK
   * @example
   * // Get one BOOK
   * const bOOK = await prisma.bOOK.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneBOOKArgs>(
    args: Subset<T, FindOneBOOKArgs>
  ): CheckSelect<T, BOOKClient<BOOK | null>, BOOKClient<BOOKGetPayload<T> | null>>
  /**
   * Find zero or more BOOKS.
   * @param {FindManyBOOKArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all BOOKS
   * const bOOKS = await prisma.bOOK.findMany()
   * 
   * // Get first 10 BOOKS
   * const bOOKS = await prisma.bOOK.findMany({ first: 10 })
   * 
   * // Only select the `book_author`
   * const bOOKWithBook_authorOnly = await prisma.bOOK.findMany({ select: { book_author: true } })
   * 
  **/
  findMany<T extends FindManyBOOKArgs>(
    args?: Subset<T, FindManyBOOKArgs>
  ): CheckSelect<T, Promise<Array<BOOK>>, Promise<Array<BOOKGetPayload<T>>>>
  /**
   * Create a BOOK.
   * @param {BOOKCreateArgs} args - Arguments to create a BOOK.
   * @example
   * // Create one BOOK
   * const user = await prisma.bOOK.create({
   *   data: {
   *     // ... data to create a BOOK
   *   }
   * })
   * 
  **/
  create<T extends BOOKCreateArgs>(
    args: Subset<T, BOOKCreateArgs>
  ): CheckSelect<T, BOOKClient<BOOK>, BOOKClient<BOOKGetPayload<T>>>
  /**
   * Delete a BOOK.
   * @param {BOOKDeleteArgs} args - Arguments to delete one BOOK.
   * @example
   * // Delete one BOOK
   * const user = await prisma.bOOK.delete({
   *   where: {
   *     // ... filter to delete one BOOK
   *   }
   * })
   * 
  **/
  delete<T extends BOOKDeleteArgs>(
    args: Subset<T, BOOKDeleteArgs>
  ): CheckSelect<T, BOOKClient<BOOK>, BOOKClient<BOOKGetPayload<T>>>
  /**
   * Update one BOOK.
   * @param {BOOKUpdateArgs} args - Arguments to update one BOOK.
   * @example
   * // Update one BOOK
   * const bOOK = await prisma.bOOK.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends BOOKUpdateArgs>(
    args: Subset<T, BOOKUpdateArgs>
  ): CheckSelect<T, BOOKClient<BOOK>, BOOKClient<BOOKGetPayload<T>>>
  /**
   * Delete zero or more BOOKS.
   * @param {BOOKDeleteManyArgs} args - Arguments to filter BOOKS to delete.
   * @example
   * // Delete a few BOOKS
   * const { count } = await prisma.bOOK.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends BOOKDeleteManyArgs>(
    args: Subset<T, BOOKDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more BOOKS.
   * @param {BOOKUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many BOOKS
   * const bOOK = await prisma.bOOK.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends BOOKUpdateManyArgs>(
    args: Subset<T, BOOKUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one BOOK.
   * @param {BOOKUpsertArgs} args - Arguments to update or create a BOOK.
   * @example
   * // Update or create a BOOK
   * const bOOK = await prisma.bOOK.upsert({
   *   create: {
   *     // ... data to create a BOOK
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the BOOK we want to update
   *   }
   * })
  **/
  upsert<T extends BOOKUpsertArgs>(
    args: Subset<T, BOOKUpsertArgs>
  ): CheckSelect<T, BOOKClient<BOOK>, BOOKClient<BOOKGetPayload<T>>>
  /**
   * 
   */
  count(args?: Omit<FindManyBOOKArgs, 'select' | 'include'>): Promise<number>
}

export declare class BOOKClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  private _collectTimestamps?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  CATEGORY<T extends CATEGORYArgs = {}>(args?: Subset<T, CATEGORYArgs>): CheckSelect<T, CATEGORYClient<CATEGORY | null>, CATEGORYClient<CATEGORYGetPayload<T> | null>>;

  LIB_OWN_BOOK<T extends FindManyLIB_OWN_BOOKArgs = {}>(args?: Subset<T, FindManyLIB_OWN_BOOKArgs>): CheckSelect<T, Promise<Array<LIB_OWN_BOOK>>, Promise<Array<LIB_OWN_BOOKGetPayload<T>>>>;

  LOG_BOOKToLOG_book_category<T extends FindManyLOGArgs = {}>(args?: Subset<T, FindManyLOGArgs>): CheckSelect<T, Promise<Array<LOG>>, Promise<Array<LOGGetPayload<T>>>>;

  LOG_BOOKToLOG_book_num<T extends FindManyLOGArgs = {}>(args?: Subset<T, FindManyLOGArgs>): CheckSelect<T, Promise<Array<LOG>>, Promise<Array<LOGGetPayload<T>>>>;

  USER<T extends FindManyUSERArgs = {}>(args?: Subset<T, FindManyUSERArgs>): CheckSelect<T, Promise<Array<USER>>, Promise<Array<USERGetPayload<T>>>>;

  User_BOOK<T extends FindManyUser_BOOKArgs = {}>(args?: Subset<T, FindManyUser_BOOKArgs>): CheckSelect<T, Promise<Array<User_BOOK>>, Promise<Array<User_BOOKGetPayload<T>>>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * BOOK findOne
 */
export type FindOneBOOKArgs = {
  /**
   * Select specific fields to fetch from the BOOK
  **/
  select?: BOOKSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: BOOKInclude | null
  /**
   * Filter, which BOOK to fetch.
  **/
  where: BOOKWhereUniqueInput
}


/**
 * BOOK findMany
 */
export type FindManyBOOKArgs = {
  /**
   * Select specific fields to fetch from the BOOK
  **/
  select?: BOOKSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: BOOKInclude | null
  /**
   * Filter, which BOOKS to fetch.
  **/
  where?: BOOKWhereInput
  /**
   * Determine the order of the BOOKS to fetch.
  **/
  orderBy?: BOOKOrderByInput
  /**
   * Sets the position for listing BOOKS.
  **/
  cursor?: BOOKWhereUniqueInput
  /**
   * Get all BOOKS that come after or before the BOOK you provide with the current order.
  **/
  take?: number
  /**
   * Skip the first `n` BOOKS.
  **/
  skip?: number
}


/**
 * BOOK create
 */
export type BOOKCreateArgs = {
  /**
   * Select specific fields to fetch from the BOOK
  **/
  select?: BOOKSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: BOOKInclude | null
  /**
   * The data needed to create a BOOK.
  **/
  data: BOOKCreateInput
}


/**
 * BOOK update
 */
export type BOOKUpdateArgs = {
  /**
   * Select specific fields to fetch from the BOOK
  **/
  select?: BOOKSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: BOOKInclude | null
  /**
   * The data needed to update a BOOK.
  **/
  data: BOOKUpdateInput
  /**
   * Choose, which BOOK to update.
  **/
  where: BOOKWhereUniqueInput
}


/**
 * BOOK updateMany
 */
export type BOOKUpdateManyArgs = {
  data: BOOKUpdateManyMutationInput
  where?: BOOKWhereInput
}


/**
 * BOOK upsert
 */
export type BOOKUpsertArgs = {
  /**
   * Select specific fields to fetch from the BOOK
  **/
  select?: BOOKSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: BOOKInclude | null
  /**
   * The filter to search for the BOOK to update in case it exists.
  **/
  where: BOOKWhereUniqueInput
  /**
   * In case the BOOK found by the `where` argument doesn't exist, create a new BOOK with this data.
  **/
  create: BOOKCreateInput
  /**
   * In case the BOOK was found with the provided `where` argument, update it with this data.
  **/
  update: BOOKUpdateInput
}


/**
 * BOOK delete
 */
export type BOOKDeleteArgs = {
  /**
   * Select specific fields to fetch from the BOOK
  **/
  select?: BOOKSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: BOOKInclude | null
  /**
   * Filter which BOOK to delete.
  **/
  where: BOOKWhereUniqueInput
}


/**
 * BOOK deleteMany
 */
export type BOOKDeleteManyArgs = {
  where?: BOOKWhereInput
}


/**
 * BOOK without action
 */
export type BOOKArgs = {
  /**
   * Select specific fields to fetch from the BOOK
  **/
  select?: BOOKSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: BOOKInclude | null
}



/**
 * Model CATEGORY
 */

export type CATEGORY = {
  category_name: string
  category_num: number
}

export type CATEGORYSelect = {
  category_name?: boolean
  category_num?: boolean
  BOOK?: boolean | FindManyBOOKArgs
  USER?: boolean | FindManyUSERArgs
}

export type CATEGORYInclude = {
  BOOK?: boolean | FindManyBOOKArgs
  USER?: boolean | FindManyUSERArgs
}

export type CATEGORYGetPayload<
  S extends boolean | null | undefined | CATEGORYArgs,
  U = keyof S
> = S extends true
  ? CATEGORY
  : S extends undefined
  ? never
  : S extends CATEGORYArgs | FindManyCATEGORYArgs
  ? 'include' extends U
    ? CATEGORY  & {
      [P in TrueKeys<S['include']>]:
      P extends 'BOOK'
      ? Array<BOOKGetPayload<S['include'][P]>> :
      P extends 'USER'
      ? Array<USERGetPayload<S['include'][P]>> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof CATEGORY ? CATEGORY[P]
: 
      P extends 'BOOK'
      ? Array<BOOKGetPayload<S['select'][P]>> :
      P extends 'USER'
      ? Array<USERGetPayload<S['select'][P]>> : never
    }
  : CATEGORY
: CATEGORY


export interface CATEGORYDelegate {
  /**
   * Find zero or one CATEGORY.
   * @param {FindOneCATEGORYArgs} args - Arguments to find a CATEGORY
   * @example
   * // Get one CATEGORY
   * const cATEGORY = await prisma.cATEGORY.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneCATEGORYArgs>(
    args: Subset<T, FindOneCATEGORYArgs>
  ): CheckSelect<T, CATEGORYClient<CATEGORY | null>, CATEGORYClient<CATEGORYGetPayload<T> | null>>
  /**
   * Find zero or more CATEGORIES.
   * @param {FindManyCATEGORYArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all CATEGORIES
   * const cATEGORIES = await prisma.cATEGORY.findMany()
   * 
   * // Get first 10 CATEGORIES
   * const cATEGORIES = await prisma.cATEGORY.findMany({ first: 10 })
   * 
   * // Only select the `category_name`
   * const cATEGORYWithCategory_nameOnly = await prisma.cATEGORY.findMany({ select: { category_name: true } })
   * 
  **/
  findMany<T extends FindManyCATEGORYArgs>(
    args?: Subset<T, FindManyCATEGORYArgs>
  ): CheckSelect<T, Promise<Array<CATEGORY>>, Promise<Array<CATEGORYGetPayload<T>>>>
  /**
   * Create a CATEGORY.
   * @param {CATEGORYCreateArgs} args - Arguments to create a CATEGORY.
   * @example
   * // Create one CATEGORY
   * const user = await prisma.cATEGORY.create({
   *   data: {
   *     // ... data to create a CATEGORY
   *   }
   * })
   * 
  **/
  create<T extends CATEGORYCreateArgs>(
    args: Subset<T, CATEGORYCreateArgs>
  ): CheckSelect<T, CATEGORYClient<CATEGORY>, CATEGORYClient<CATEGORYGetPayload<T>>>
  /**
   * Delete a CATEGORY.
   * @param {CATEGORYDeleteArgs} args - Arguments to delete one CATEGORY.
   * @example
   * // Delete one CATEGORY
   * const user = await prisma.cATEGORY.delete({
   *   where: {
   *     // ... filter to delete one CATEGORY
   *   }
   * })
   * 
  **/
  delete<T extends CATEGORYDeleteArgs>(
    args: Subset<T, CATEGORYDeleteArgs>
  ): CheckSelect<T, CATEGORYClient<CATEGORY>, CATEGORYClient<CATEGORYGetPayload<T>>>
  /**
   * Update one CATEGORY.
   * @param {CATEGORYUpdateArgs} args - Arguments to update one CATEGORY.
   * @example
   * // Update one CATEGORY
   * const cATEGORY = await prisma.cATEGORY.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends CATEGORYUpdateArgs>(
    args: Subset<T, CATEGORYUpdateArgs>
  ): CheckSelect<T, CATEGORYClient<CATEGORY>, CATEGORYClient<CATEGORYGetPayload<T>>>
  /**
   * Delete zero or more CATEGORIES.
   * @param {CATEGORYDeleteManyArgs} args - Arguments to filter CATEGORIES to delete.
   * @example
   * // Delete a few CATEGORIES
   * const { count } = await prisma.cATEGORY.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends CATEGORYDeleteManyArgs>(
    args: Subset<T, CATEGORYDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more CATEGORIES.
   * @param {CATEGORYUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many CATEGORIES
   * const cATEGORY = await prisma.cATEGORY.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends CATEGORYUpdateManyArgs>(
    args: Subset<T, CATEGORYUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one CATEGORY.
   * @param {CATEGORYUpsertArgs} args - Arguments to update or create a CATEGORY.
   * @example
   * // Update or create a CATEGORY
   * const cATEGORY = await prisma.cATEGORY.upsert({
   *   create: {
   *     // ... data to create a CATEGORY
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the CATEGORY we want to update
   *   }
   * })
  **/
  upsert<T extends CATEGORYUpsertArgs>(
    args: Subset<T, CATEGORYUpsertArgs>
  ): CheckSelect<T, CATEGORYClient<CATEGORY>, CATEGORYClient<CATEGORYGetPayload<T>>>
  /**
   * 
   */
  count(args?: Omit<FindManyCATEGORYArgs, 'select' | 'include'>): Promise<number>
}

export declare class CATEGORYClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  private _collectTimestamps?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  BOOK<T extends FindManyBOOKArgs = {}>(args?: Subset<T, FindManyBOOKArgs>): CheckSelect<T, Promise<Array<BOOK>>, Promise<Array<BOOKGetPayload<T>>>>;

  USER<T extends FindManyUSERArgs = {}>(args?: Subset<T, FindManyUSERArgs>): CheckSelect<T, Promise<Array<USER>>, Promise<Array<USERGetPayload<T>>>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * CATEGORY findOne
 */
export type FindOneCATEGORYArgs = {
  /**
   * Select specific fields to fetch from the CATEGORY
  **/
  select?: CATEGORYSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: CATEGORYInclude | null
  /**
   * Filter, which CATEGORY to fetch.
  **/
  where: CATEGORYWhereUniqueInput
}


/**
 * CATEGORY findMany
 */
export type FindManyCATEGORYArgs = {
  /**
   * Select specific fields to fetch from the CATEGORY
  **/
  select?: CATEGORYSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: CATEGORYInclude | null
  /**
   * Filter, which CATEGORIES to fetch.
  **/
  where?: CATEGORYWhereInput
  /**
   * Determine the order of the CATEGORIES to fetch.
  **/
  orderBy?: CATEGORYOrderByInput
  /**
   * Sets the position for listing CATEGORIES.
  **/
  cursor?: CATEGORYWhereUniqueInput
  /**
   * Get all CATEGORIES that come after or before the CATEGORY you provide with the current order.
  **/
  take?: number
  /**
   * Skip the first `n` CATEGORIES.
  **/
  skip?: number
}


/**
 * CATEGORY create
 */
export type CATEGORYCreateArgs = {
  /**
   * Select specific fields to fetch from the CATEGORY
  **/
  select?: CATEGORYSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: CATEGORYInclude | null
  /**
   * The data needed to create a CATEGORY.
  **/
  data: CATEGORYCreateInput
}


/**
 * CATEGORY update
 */
export type CATEGORYUpdateArgs = {
  /**
   * Select specific fields to fetch from the CATEGORY
  **/
  select?: CATEGORYSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: CATEGORYInclude | null
  /**
   * The data needed to update a CATEGORY.
  **/
  data: CATEGORYUpdateInput
  /**
   * Choose, which CATEGORY to update.
  **/
  where: CATEGORYWhereUniqueInput
}


/**
 * CATEGORY updateMany
 */
export type CATEGORYUpdateManyArgs = {
  data: CATEGORYUpdateManyMutationInput
  where?: CATEGORYWhereInput
}


/**
 * CATEGORY upsert
 */
export type CATEGORYUpsertArgs = {
  /**
   * Select specific fields to fetch from the CATEGORY
  **/
  select?: CATEGORYSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: CATEGORYInclude | null
  /**
   * The filter to search for the CATEGORY to update in case it exists.
  **/
  where: CATEGORYWhereUniqueInput
  /**
   * In case the CATEGORY found by the `where` argument doesn't exist, create a new CATEGORY with this data.
  **/
  create: CATEGORYCreateInput
  /**
   * In case the CATEGORY was found with the provided `where` argument, update it with this data.
  **/
  update: CATEGORYUpdateInput
}


/**
 * CATEGORY delete
 */
export type CATEGORYDeleteArgs = {
  /**
   * Select specific fields to fetch from the CATEGORY
  **/
  select?: CATEGORYSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: CATEGORYInclude | null
  /**
   * Filter which CATEGORY to delete.
  **/
  where: CATEGORYWhereUniqueInput
}


/**
 * CATEGORY deleteMany
 */
export type CATEGORYDeleteManyArgs = {
  where?: CATEGORYWhereInput
}


/**
 * CATEGORY without action
 */
export type CATEGORYArgs = {
  /**
   * Select specific fields to fetch from the CATEGORY
  **/
  select?: CATEGORYSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: CATEGORYInclude | null
}



/**
 * Model LIBRARY
 */

export type LIBRARY = {
  lib_location: string | null
  lib_name: string | null
  lib_num: number
  lib_phone: string | null
}

export type LIBRARYSelect = {
  lib_location?: boolean
  lib_name?: boolean
  lib_num?: boolean
  lib_phone?: boolean
  LIB_OWN_BOOK?: boolean | FindManyLIB_OWN_BOOKArgs
}

export type LIBRARYInclude = {
  LIB_OWN_BOOK?: boolean | FindManyLIB_OWN_BOOKArgs
}

export type LIBRARYGetPayload<
  S extends boolean | null | undefined | LIBRARYArgs,
  U = keyof S
> = S extends true
  ? LIBRARY
  : S extends undefined
  ? never
  : S extends LIBRARYArgs | FindManyLIBRARYArgs
  ? 'include' extends U
    ? LIBRARY  & {
      [P in TrueKeys<S['include']>]:
      P extends 'LIB_OWN_BOOK'
      ? Array<LIB_OWN_BOOKGetPayload<S['include'][P]>> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof LIBRARY ? LIBRARY[P]
: 
      P extends 'LIB_OWN_BOOK'
      ? Array<LIB_OWN_BOOKGetPayload<S['select'][P]>> : never
    }
  : LIBRARY
: LIBRARY


export interface LIBRARYDelegate {
  /**
   * Find zero or one LIBRARY.
   * @param {FindOneLIBRARYArgs} args - Arguments to find a LIBRARY
   * @example
   * // Get one LIBRARY
   * const lIBRARY = await prisma.lIBRARY.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneLIBRARYArgs>(
    args: Subset<T, FindOneLIBRARYArgs>
  ): CheckSelect<T, LIBRARYClient<LIBRARY | null>, LIBRARYClient<LIBRARYGetPayload<T> | null>>
  /**
   * Find zero or more LIBRARIES.
   * @param {FindManyLIBRARYArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all LIBRARIES
   * const lIBRARIES = await prisma.lIBRARY.findMany()
   * 
   * // Get first 10 LIBRARIES
   * const lIBRARIES = await prisma.lIBRARY.findMany({ first: 10 })
   * 
   * // Only select the `lib_location`
   * const lIBRARYWithLib_locationOnly = await prisma.lIBRARY.findMany({ select: { lib_location: true } })
   * 
  **/
  findMany<T extends FindManyLIBRARYArgs>(
    args?: Subset<T, FindManyLIBRARYArgs>
  ): CheckSelect<T, Promise<Array<LIBRARY>>, Promise<Array<LIBRARYGetPayload<T>>>>
  /**
   * Create a LIBRARY.
   * @param {LIBRARYCreateArgs} args - Arguments to create a LIBRARY.
   * @example
   * // Create one LIBRARY
   * const user = await prisma.lIBRARY.create({
   *   data: {
   *     // ... data to create a LIBRARY
   *   }
   * })
   * 
  **/
  create<T extends LIBRARYCreateArgs>(
    args: Subset<T, LIBRARYCreateArgs>
  ): CheckSelect<T, LIBRARYClient<LIBRARY>, LIBRARYClient<LIBRARYGetPayload<T>>>
  /**
   * Delete a LIBRARY.
   * @param {LIBRARYDeleteArgs} args - Arguments to delete one LIBRARY.
   * @example
   * // Delete one LIBRARY
   * const user = await prisma.lIBRARY.delete({
   *   where: {
   *     // ... filter to delete one LIBRARY
   *   }
   * })
   * 
  **/
  delete<T extends LIBRARYDeleteArgs>(
    args: Subset<T, LIBRARYDeleteArgs>
  ): CheckSelect<T, LIBRARYClient<LIBRARY>, LIBRARYClient<LIBRARYGetPayload<T>>>
  /**
   * Update one LIBRARY.
   * @param {LIBRARYUpdateArgs} args - Arguments to update one LIBRARY.
   * @example
   * // Update one LIBRARY
   * const lIBRARY = await prisma.lIBRARY.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends LIBRARYUpdateArgs>(
    args: Subset<T, LIBRARYUpdateArgs>
  ): CheckSelect<T, LIBRARYClient<LIBRARY>, LIBRARYClient<LIBRARYGetPayload<T>>>
  /**
   * Delete zero or more LIBRARIES.
   * @param {LIBRARYDeleteManyArgs} args - Arguments to filter LIBRARIES to delete.
   * @example
   * // Delete a few LIBRARIES
   * const { count } = await prisma.lIBRARY.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends LIBRARYDeleteManyArgs>(
    args: Subset<T, LIBRARYDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more LIBRARIES.
   * @param {LIBRARYUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many LIBRARIES
   * const lIBRARY = await prisma.lIBRARY.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends LIBRARYUpdateManyArgs>(
    args: Subset<T, LIBRARYUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one LIBRARY.
   * @param {LIBRARYUpsertArgs} args - Arguments to update or create a LIBRARY.
   * @example
   * // Update or create a LIBRARY
   * const lIBRARY = await prisma.lIBRARY.upsert({
   *   create: {
   *     // ... data to create a LIBRARY
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the LIBRARY we want to update
   *   }
   * })
  **/
  upsert<T extends LIBRARYUpsertArgs>(
    args: Subset<T, LIBRARYUpsertArgs>
  ): CheckSelect<T, LIBRARYClient<LIBRARY>, LIBRARYClient<LIBRARYGetPayload<T>>>
  /**
   * 
   */
  count(args?: Omit<FindManyLIBRARYArgs, 'select' | 'include'>): Promise<number>
}

export declare class LIBRARYClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  private _collectTimestamps?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  LIB_OWN_BOOK<T extends FindManyLIB_OWN_BOOKArgs = {}>(args?: Subset<T, FindManyLIB_OWN_BOOKArgs>): CheckSelect<T, Promise<Array<LIB_OWN_BOOK>>, Promise<Array<LIB_OWN_BOOKGetPayload<T>>>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * LIBRARY findOne
 */
export type FindOneLIBRARYArgs = {
  /**
   * Select specific fields to fetch from the LIBRARY
  **/
  select?: LIBRARYSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: LIBRARYInclude | null
  /**
   * Filter, which LIBRARY to fetch.
  **/
  where: LIBRARYWhereUniqueInput
}


/**
 * LIBRARY findMany
 */
export type FindManyLIBRARYArgs = {
  /**
   * Select specific fields to fetch from the LIBRARY
  **/
  select?: LIBRARYSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: LIBRARYInclude | null
  /**
   * Filter, which LIBRARIES to fetch.
  **/
  where?: LIBRARYWhereInput
  /**
   * Determine the order of the LIBRARIES to fetch.
  **/
  orderBy?: LIBRARYOrderByInput
  /**
   * Sets the position for listing LIBRARIES.
  **/
  cursor?: LIBRARYWhereUniqueInput
  /**
   * Get all LIBRARIES that come after or before the LIBRARY you provide with the current order.
  **/
  take?: number
  /**
   * Skip the first `n` LIBRARIES.
  **/
  skip?: number
}


/**
 * LIBRARY create
 */
export type LIBRARYCreateArgs = {
  /**
   * Select specific fields to fetch from the LIBRARY
  **/
  select?: LIBRARYSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: LIBRARYInclude | null
  /**
   * The data needed to create a LIBRARY.
  **/
  data: LIBRARYCreateInput
}


/**
 * LIBRARY update
 */
export type LIBRARYUpdateArgs = {
  /**
   * Select specific fields to fetch from the LIBRARY
  **/
  select?: LIBRARYSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: LIBRARYInclude | null
  /**
   * The data needed to update a LIBRARY.
  **/
  data: LIBRARYUpdateInput
  /**
   * Choose, which LIBRARY to update.
  **/
  where: LIBRARYWhereUniqueInput
}


/**
 * LIBRARY updateMany
 */
export type LIBRARYUpdateManyArgs = {
  data: LIBRARYUpdateManyMutationInput
  where?: LIBRARYWhereInput
}


/**
 * LIBRARY upsert
 */
export type LIBRARYUpsertArgs = {
  /**
   * Select specific fields to fetch from the LIBRARY
  **/
  select?: LIBRARYSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: LIBRARYInclude | null
  /**
   * The filter to search for the LIBRARY to update in case it exists.
  **/
  where: LIBRARYWhereUniqueInput
  /**
   * In case the LIBRARY found by the `where` argument doesn't exist, create a new LIBRARY with this data.
  **/
  create: LIBRARYCreateInput
  /**
   * In case the LIBRARY was found with the provided `where` argument, update it with this data.
  **/
  update: LIBRARYUpdateInput
}


/**
 * LIBRARY delete
 */
export type LIBRARYDeleteArgs = {
  /**
   * Select specific fields to fetch from the LIBRARY
  **/
  select?: LIBRARYSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: LIBRARYInclude | null
  /**
   * Filter which LIBRARY to delete.
  **/
  where: LIBRARYWhereUniqueInput
}


/**
 * LIBRARY deleteMany
 */
export type LIBRARYDeleteManyArgs = {
  where?: LIBRARYWhereInput
}


/**
 * LIBRARY without action
 */
export type LIBRARYArgs = {
  /**
   * Select specific fields to fetch from the LIBRARY
  **/
  select?: LIBRARYSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: LIBRARYInclude | null
}



/**
 * Model LIB_OWN_BOOK
 */

export type LIB_OWN_BOOK = {
  book_num: number
  book_sector: string
  lib_num: number
  LOB_AI: number
  retention: string
}

export type LIB_OWN_BOOKSelect = {
  book_num?: boolean
  book_sector?: boolean
  lib_num?: boolean
  LOB_AI?: boolean
  retention?: boolean
  BOOK?: boolean | BOOKArgs
  LIBRARY?: boolean | LIBRARYArgs
}

export type LIB_OWN_BOOKInclude = {
  BOOK?: boolean | BOOKArgs
  LIBRARY?: boolean | LIBRARYArgs
}

export type LIB_OWN_BOOKGetPayload<
  S extends boolean | null | undefined | LIB_OWN_BOOKArgs,
  U = keyof S
> = S extends true
  ? LIB_OWN_BOOK
  : S extends undefined
  ? never
  : S extends LIB_OWN_BOOKArgs | FindManyLIB_OWN_BOOKArgs
  ? 'include' extends U
    ? LIB_OWN_BOOK  & {
      [P in TrueKeys<S['include']>]:
      P extends 'BOOK'
      ? BOOKGetPayload<S['include'][P]> :
      P extends 'LIBRARY'
      ? LIBRARYGetPayload<S['include'][P]> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof LIB_OWN_BOOK ? LIB_OWN_BOOK[P]
: 
      P extends 'BOOK'
      ? BOOKGetPayload<S['select'][P]> :
      P extends 'LIBRARY'
      ? LIBRARYGetPayload<S['select'][P]> : never
    }
  : LIB_OWN_BOOK
: LIB_OWN_BOOK


export interface LIB_OWN_BOOKDelegate {
  /**
   * Find zero or one LIB_OWN_BOOK.
   * @param {FindOneLIB_OWN_BOOKArgs} args - Arguments to find a LIB_OWN_BOOK
   * @example
   * // Get one LIB_OWN_BOOK
   * const lIB_OWN_BOOK = await prisma.lIB_OWN_BOOK.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneLIB_OWN_BOOKArgs>(
    args: Subset<T, FindOneLIB_OWN_BOOKArgs>
  ): CheckSelect<T, LIB_OWN_BOOKClient<LIB_OWN_BOOK | null>, LIB_OWN_BOOKClient<LIB_OWN_BOOKGetPayload<T> | null>>
  /**
   * Find zero or more LIB_OWN_BOOKS.
   * @param {FindManyLIB_OWN_BOOKArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all LIB_OWN_BOOKS
   * const lIB_OWN_BOOKS = await prisma.lIB_OWN_BOOK.findMany()
   * 
   * // Get first 10 LIB_OWN_BOOKS
   * const lIB_OWN_BOOKS = await prisma.lIB_OWN_BOOK.findMany({ first: 10 })
   * 
   * // Only select the `book_num`
   * const lIB_OWN_BOOKWithBook_numOnly = await prisma.lIB_OWN_BOOK.findMany({ select: { book_num: true } })
   * 
  **/
  findMany<T extends FindManyLIB_OWN_BOOKArgs>(
    args?: Subset<T, FindManyLIB_OWN_BOOKArgs>
  ): CheckSelect<T, Promise<Array<LIB_OWN_BOOK>>, Promise<Array<LIB_OWN_BOOKGetPayload<T>>>>
  /**
   * Create a LIB_OWN_BOOK.
   * @param {LIB_OWN_BOOKCreateArgs} args - Arguments to create a LIB_OWN_BOOK.
   * @example
   * // Create one LIB_OWN_BOOK
   * const user = await prisma.lIB_OWN_BOOK.create({
   *   data: {
   *     // ... data to create a LIB_OWN_BOOK
   *   }
   * })
   * 
  **/
  create<T extends LIB_OWN_BOOKCreateArgs>(
    args: Subset<T, LIB_OWN_BOOKCreateArgs>
  ): CheckSelect<T, LIB_OWN_BOOKClient<LIB_OWN_BOOK>, LIB_OWN_BOOKClient<LIB_OWN_BOOKGetPayload<T>>>
  /**
   * Delete a LIB_OWN_BOOK.
   * @param {LIB_OWN_BOOKDeleteArgs} args - Arguments to delete one LIB_OWN_BOOK.
   * @example
   * // Delete one LIB_OWN_BOOK
   * const user = await prisma.lIB_OWN_BOOK.delete({
   *   where: {
   *     // ... filter to delete one LIB_OWN_BOOK
   *   }
   * })
   * 
  **/
  delete<T extends LIB_OWN_BOOKDeleteArgs>(
    args: Subset<T, LIB_OWN_BOOKDeleteArgs>
  ): CheckSelect<T, LIB_OWN_BOOKClient<LIB_OWN_BOOK>, LIB_OWN_BOOKClient<LIB_OWN_BOOKGetPayload<T>>>
  /**
   * Update one LIB_OWN_BOOK.
   * @param {LIB_OWN_BOOKUpdateArgs} args - Arguments to update one LIB_OWN_BOOK.
   * @example
   * // Update one LIB_OWN_BOOK
   * const lIB_OWN_BOOK = await prisma.lIB_OWN_BOOK.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends LIB_OWN_BOOKUpdateArgs>(
    args: Subset<T, LIB_OWN_BOOKUpdateArgs>
  ): CheckSelect<T, LIB_OWN_BOOKClient<LIB_OWN_BOOK>, LIB_OWN_BOOKClient<LIB_OWN_BOOKGetPayload<T>>>
  /**
   * Delete zero or more LIB_OWN_BOOKS.
   * @param {LIB_OWN_BOOKDeleteManyArgs} args - Arguments to filter LIB_OWN_BOOKS to delete.
   * @example
   * // Delete a few LIB_OWN_BOOKS
   * const { count } = await prisma.lIB_OWN_BOOK.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends LIB_OWN_BOOKDeleteManyArgs>(
    args: Subset<T, LIB_OWN_BOOKDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more LIB_OWN_BOOKS.
   * @param {LIB_OWN_BOOKUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many LIB_OWN_BOOKS
   * const lIB_OWN_BOOK = await prisma.lIB_OWN_BOOK.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends LIB_OWN_BOOKUpdateManyArgs>(
    args: Subset<T, LIB_OWN_BOOKUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one LIB_OWN_BOOK.
   * @param {LIB_OWN_BOOKUpsertArgs} args - Arguments to update or create a LIB_OWN_BOOK.
   * @example
   * // Update or create a LIB_OWN_BOOK
   * const lIB_OWN_BOOK = await prisma.lIB_OWN_BOOK.upsert({
   *   create: {
   *     // ... data to create a LIB_OWN_BOOK
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the LIB_OWN_BOOK we want to update
   *   }
   * })
  **/
  upsert<T extends LIB_OWN_BOOKUpsertArgs>(
    args: Subset<T, LIB_OWN_BOOKUpsertArgs>
  ): CheckSelect<T, LIB_OWN_BOOKClient<LIB_OWN_BOOK>, LIB_OWN_BOOKClient<LIB_OWN_BOOKGetPayload<T>>>
  /**
   * 
   */
  count(args?: Omit<FindManyLIB_OWN_BOOKArgs, 'select' | 'include'>): Promise<number>
}

export declare class LIB_OWN_BOOKClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  private _collectTimestamps?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  BOOK<T extends BOOKArgs = {}>(args?: Subset<T, BOOKArgs>): CheckSelect<T, BOOKClient<BOOK | null>, BOOKClient<BOOKGetPayload<T> | null>>;

  LIBRARY<T extends LIBRARYArgs = {}>(args?: Subset<T, LIBRARYArgs>): CheckSelect<T, LIBRARYClient<LIBRARY | null>, LIBRARYClient<LIBRARYGetPayload<T> | null>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * LIB_OWN_BOOK findOne
 */
export type FindOneLIB_OWN_BOOKArgs = {
  /**
   * Select specific fields to fetch from the LIB_OWN_BOOK
  **/
  select?: LIB_OWN_BOOKSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: LIB_OWN_BOOKInclude | null
  /**
   * Filter, which LIB_OWN_BOOK to fetch.
  **/
  where: LIB_OWN_BOOKWhereUniqueInput
}


/**
 * LIB_OWN_BOOK findMany
 */
export type FindManyLIB_OWN_BOOKArgs = {
  /**
   * Select specific fields to fetch from the LIB_OWN_BOOK
  **/
  select?: LIB_OWN_BOOKSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: LIB_OWN_BOOKInclude | null
  /**
   * Filter, which LIB_OWN_BOOKS to fetch.
  **/
  where?: LIB_OWN_BOOKWhereInput
  /**
   * Determine the order of the LIB_OWN_BOOKS to fetch.
  **/
  orderBy?: LIB_OWN_BOOKOrderByInput
  /**
   * Sets the position for listing LIB_OWN_BOOKS.
  **/
  cursor?: LIB_OWN_BOOKWhereUniqueInput
  /**
   * Get all LIB_OWN_BOOKS that come after or before the LIB_OWN_BOOK you provide with the current order.
  **/
  take?: number
  /**
   * Skip the first `n` LIB_OWN_BOOKS.
  **/
  skip?: number
}


/**
 * LIB_OWN_BOOK create
 */
export type LIB_OWN_BOOKCreateArgs = {
  /**
   * Select specific fields to fetch from the LIB_OWN_BOOK
  **/
  select?: LIB_OWN_BOOKSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: LIB_OWN_BOOKInclude | null
  /**
   * The data needed to create a LIB_OWN_BOOK.
  **/
  data: LIB_OWN_BOOKCreateInput
}


/**
 * LIB_OWN_BOOK update
 */
export type LIB_OWN_BOOKUpdateArgs = {
  /**
   * Select specific fields to fetch from the LIB_OWN_BOOK
  **/
  select?: LIB_OWN_BOOKSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: LIB_OWN_BOOKInclude | null
  /**
   * The data needed to update a LIB_OWN_BOOK.
  **/
  data: LIB_OWN_BOOKUpdateInput
  /**
   * Choose, which LIB_OWN_BOOK to update.
  **/
  where: LIB_OWN_BOOKWhereUniqueInput
}


/**
 * LIB_OWN_BOOK updateMany
 */
export type LIB_OWN_BOOKUpdateManyArgs = {
  data: LIB_OWN_BOOKUpdateManyMutationInput
  where?: LIB_OWN_BOOKWhereInput
}


/**
 * LIB_OWN_BOOK upsert
 */
export type LIB_OWN_BOOKUpsertArgs = {
  /**
   * Select specific fields to fetch from the LIB_OWN_BOOK
  **/
  select?: LIB_OWN_BOOKSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: LIB_OWN_BOOKInclude | null
  /**
   * The filter to search for the LIB_OWN_BOOK to update in case it exists.
  **/
  where: LIB_OWN_BOOKWhereUniqueInput
  /**
   * In case the LIB_OWN_BOOK found by the `where` argument doesn't exist, create a new LIB_OWN_BOOK with this data.
  **/
  create: LIB_OWN_BOOKCreateInput
  /**
   * In case the LIB_OWN_BOOK was found with the provided `where` argument, update it with this data.
  **/
  update: LIB_OWN_BOOKUpdateInput
}


/**
 * LIB_OWN_BOOK delete
 */
export type LIB_OWN_BOOKDeleteArgs = {
  /**
   * Select specific fields to fetch from the LIB_OWN_BOOK
  **/
  select?: LIB_OWN_BOOKSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: LIB_OWN_BOOKInclude | null
  /**
   * Filter which LIB_OWN_BOOK to delete.
  **/
  where: LIB_OWN_BOOKWhereUniqueInput
}


/**
 * LIB_OWN_BOOK deleteMany
 */
export type LIB_OWN_BOOKDeleteManyArgs = {
  where?: LIB_OWN_BOOKWhereInput
}


/**
 * LIB_OWN_BOOK without action
 */
export type LIB_OWN_BOOKArgs = {
  /**
   * Select specific fields to fetch from the LIB_OWN_BOOK
  **/
  select?: LIB_OWN_BOOKSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: LIB_OWN_BOOKInclude | null
}



/**
 * Model LOG
 */

export type LOG = {
  book_category: number
  book_num: number
  L_AI: number
  search_time: Date
  user_ID: string
}

export type LOGSelect = {
  book_category?: boolean
  book_num?: boolean
  L_AI?: boolean
  search_time?: boolean
  user_ID?: boolean
  BOOK_BOOKToLOG_book_category?: boolean | BOOKArgs
  BOOK_BOOKToLOG_book_num?: boolean | BOOKArgs
  USER?: boolean | USERArgs
}

export type LOGInclude = {
  BOOK_BOOKToLOG_book_category?: boolean | BOOKArgs
  BOOK_BOOKToLOG_book_num?: boolean | BOOKArgs
  USER?: boolean | USERArgs
}

export type LOGGetPayload<
  S extends boolean | null | undefined | LOGArgs,
  U = keyof S
> = S extends true
  ? LOG
  : S extends undefined
  ? never
  : S extends LOGArgs | FindManyLOGArgs
  ? 'include' extends U
    ? LOG  & {
      [P in TrueKeys<S['include']>]:
      P extends 'BOOK_BOOKToLOG_book_category'
      ? BOOKGetPayload<S['include'][P]> :
      P extends 'BOOK_BOOKToLOG_book_num'
      ? BOOKGetPayload<S['include'][P]> :
      P extends 'USER'
      ? USERGetPayload<S['include'][P]> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof LOG ? LOG[P]
: 
      P extends 'BOOK_BOOKToLOG_book_category'
      ? BOOKGetPayload<S['select'][P]> :
      P extends 'BOOK_BOOKToLOG_book_num'
      ? BOOKGetPayload<S['select'][P]> :
      P extends 'USER'
      ? USERGetPayload<S['select'][P]> : never
    }
  : LOG
: LOG


export interface LOGDelegate {
  /**
   * Find zero or one LOG.
   * @param {FindOneLOGArgs} args - Arguments to find a LOG
   * @example
   * // Get one LOG
   * const lOG = await prisma.lOG.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneLOGArgs>(
    args: Subset<T, FindOneLOGArgs>
  ): CheckSelect<T, LOGClient<LOG | null>, LOGClient<LOGGetPayload<T> | null>>
  /**
   * Find zero or more LOGS.
   * @param {FindManyLOGArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all LOGS
   * const lOGS = await prisma.lOG.findMany()
   * 
   * // Get first 10 LOGS
   * const lOGS = await prisma.lOG.findMany({ first: 10 })
   * 
   * // Only select the `book_category`
   * const lOGWithBook_categoryOnly = await prisma.lOG.findMany({ select: { book_category: true } })
   * 
  **/
  findMany<T extends FindManyLOGArgs>(
    args?: Subset<T, FindManyLOGArgs>
  ): CheckSelect<T, Promise<Array<LOG>>, Promise<Array<LOGGetPayload<T>>>>
  /**
   * Create a LOG.
   * @param {LOGCreateArgs} args - Arguments to create a LOG.
   * @example
   * // Create one LOG
   * const user = await prisma.lOG.create({
   *   data: {
   *     // ... data to create a LOG
   *   }
   * })
   * 
  **/
  create<T extends LOGCreateArgs>(
    args: Subset<T, LOGCreateArgs>
  ): CheckSelect<T, LOGClient<LOG>, LOGClient<LOGGetPayload<T>>>
  /**
   * Delete a LOG.
   * @param {LOGDeleteArgs} args - Arguments to delete one LOG.
   * @example
   * // Delete one LOG
   * const user = await prisma.lOG.delete({
   *   where: {
   *     // ... filter to delete one LOG
   *   }
   * })
   * 
  **/
  delete<T extends LOGDeleteArgs>(
    args: Subset<T, LOGDeleteArgs>
  ): CheckSelect<T, LOGClient<LOG>, LOGClient<LOGGetPayload<T>>>
  /**
   * Update one LOG.
   * @param {LOGUpdateArgs} args - Arguments to update one LOG.
   * @example
   * // Update one LOG
   * const lOG = await prisma.lOG.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends LOGUpdateArgs>(
    args: Subset<T, LOGUpdateArgs>
  ): CheckSelect<T, LOGClient<LOG>, LOGClient<LOGGetPayload<T>>>
  /**
   * Delete zero or more LOGS.
   * @param {LOGDeleteManyArgs} args - Arguments to filter LOGS to delete.
   * @example
   * // Delete a few LOGS
   * const { count } = await prisma.lOG.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends LOGDeleteManyArgs>(
    args: Subset<T, LOGDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more LOGS.
   * @param {LOGUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many LOGS
   * const lOG = await prisma.lOG.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends LOGUpdateManyArgs>(
    args: Subset<T, LOGUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one LOG.
   * @param {LOGUpsertArgs} args - Arguments to update or create a LOG.
   * @example
   * // Update or create a LOG
   * const lOG = await prisma.lOG.upsert({
   *   create: {
   *     // ... data to create a LOG
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the LOG we want to update
   *   }
   * })
  **/
  upsert<T extends LOGUpsertArgs>(
    args: Subset<T, LOGUpsertArgs>
  ): CheckSelect<T, LOGClient<LOG>, LOGClient<LOGGetPayload<T>>>
  /**
   * 
   */
  count(args?: Omit<FindManyLOGArgs, 'select' | 'include'>): Promise<number>
}

export declare class LOGClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  private _collectTimestamps?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  BOOK_BOOKToLOG_book_category<T extends BOOKArgs = {}>(args?: Subset<T, BOOKArgs>): CheckSelect<T, BOOKClient<BOOK | null>, BOOKClient<BOOKGetPayload<T> | null>>;

  BOOK_BOOKToLOG_book_num<T extends BOOKArgs = {}>(args?: Subset<T, BOOKArgs>): CheckSelect<T, BOOKClient<BOOK | null>, BOOKClient<BOOKGetPayload<T> | null>>;

  USER<T extends USERArgs = {}>(args?: Subset<T, USERArgs>): CheckSelect<T, USERClient<USER | null>, USERClient<USERGetPayload<T> | null>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * LOG findOne
 */
export type FindOneLOGArgs = {
  /**
   * Select specific fields to fetch from the LOG
  **/
  select?: LOGSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: LOGInclude | null
  /**
   * Filter, which LOG to fetch.
  **/
  where: LOGWhereUniqueInput
}


/**
 * LOG findMany
 */
export type FindManyLOGArgs = {
  /**
   * Select specific fields to fetch from the LOG
  **/
  select?: LOGSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: LOGInclude | null
  /**
   * Filter, which LOGS to fetch.
  **/
  where?: LOGWhereInput
  /**
   * Determine the order of the LOGS to fetch.
  **/
  orderBy?: LOGOrderByInput
  /**
   * Sets the position for listing LOGS.
  **/
  cursor?: LOGWhereUniqueInput
  /**
   * Get all LOGS that come after or before the LOG you provide with the current order.
  **/
  take?: number
  /**
   * Skip the first `n` LOGS.
  **/
  skip?: number
}


/**
 * LOG create
 */
export type LOGCreateArgs = {
  /**
   * Select specific fields to fetch from the LOG
  **/
  select?: LOGSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: LOGInclude | null
  /**
   * The data needed to create a LOG.
  **/
  data: LOGCreateInput
}


/**
 * LOG update
 */
export type LOGUpdateArgs = {
  /**
   * Select specific fields to fetch from the LOG
  **/
  select?: LOGSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: LOGInclude | null
  /**
   * The data needed to update a LOG.
  **/
  data: LOGUpdateInput
  /**
   * Choose, which LOG to update.
  **/
  where: LOGWhereUniqueInput
}


/**
 * LOG updateMany
 */
export type LOGUpdateManyArgs = {
  data: LOGUpdateManyMutationInput
  where?: LOGWhereInput
}


/**
 * LOG upsert
 */
export type LOGUpsertArgs = {
  /**
   * Select specific fields to fetch from the LOG
  **/
  select?: LOGSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: LOGInclude | null
  /**
   * The filter to search for the LOG to update in case it exists.
  **/
  where: LOGWhereUniqueInput
  /**
   * In case the LOG found by the `where` argument doesn't exist, create a new LOG with this data.
  **/
  create: LOGCreateInput
  /**
   * In case the LOG was found with the provided `where` argument, update it with this data.
  **/
  update: LOGUpdateInput
}


/**
 * LOG delete
 */
export type LOGDeleteArgs = {
  /**
   * Select specific fields to fetch from the LOG
  **/
  select?: LOGSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: LOGInclude | null
  /**
   * Filter which LOG to delete.
  **/
  where: LOGWhereUniqueInput
}


/**
 * LOG deleteMany
 */
export type LOGDeleteManyArgs = {
  where?: LOGWhereInput
}


/**
 * LOG without action
 */
export type LOGArgs = {
  /**
   * Select specific fields to fetch from the LOG
  **/
  select?: LOGSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: LOGInclude | null
}



/**
 * Model USER
 */

export type USER = {
  user_age: number | null
  user_category: number | null
  user_gender: string | null
  user_ID: string
  user_mindbook: number | null
  user_name: string
  user_password: string
  user_phone: string
}

export type USERSelect = {
  user_age?: boolean
  user_category?: boolean
  user_gender?: boolean
  user_ID?: boolean
  user_mindbook?: boolean
  user_name?: boolean
  user_password?: boolean
  user_phone?: boolean
  CATEGORY?: boolean | CATEGORYArgs
  BOOK?: boolean | BOOKArgs
  LOG?: boolean | FindManyLOGArgs
  User_BOOK?: boolean | FindManyUser_BOOKArgs
}

export type USERInclude = {
  CATEGORY?: boolean | CATEGORYArgs
  BOOK?: boolean | BOOKArgs
  LOG?: boolean | FindManyLOGArgs
  User_BOOK?: boolean | FindManyUser_BOOKArgs
}

export type USERGetPayload<
  S extends boolean | null | undefined | USERArgs,
  U = keyof S
> = S extends true
  ? USER
  : S extends undefined
  ? never
  : S extends USERArgs | FindManyUSERArgs
  ? 'include' extends U
    ? USER  & {
      [P in TrueKeys<S['include']>]:
      P extends 'CATEGORY'
      ? CATEGORYGetPayload<S['include'][P]> | null :
      P extends 'BOOK'
      ? BOOKGetPayload<S['include'][P]> | null :
      P extends 'LOG'
      ? Array<LOGGetPayload<S['include'][P]>> :
      P extends 'User_BOOK'
      ? Array<User_BOOKGetPayload<S['include'][P]>> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof USER ? USER[P]
: 
      P extends 'CATEGORY'
      ? CATEGORYGetPayload<S['select'][P]> | null :
      P extends 'BOOK'
      ? BOOKGetPayload<S['select'][P]> | null :
      P extends 'LOG'
      ? Array<LOGGetPayload<S['select'][P]>> :
      P extends 'User_BOOK'
      ? Array<User_BOOKGetPayload<S['select'][P]>> : never
    }
  : USER
: USER


export interface USERDelegate {
  /**
   * Find zero or one USER.
   * @param {FindOneUSERArgs} args - Arguments to find a USER
   * @example
   * // Get one USER
   * const uSER = await prisma.uSER.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneUSERArgs>(
    args: Subset<T, FindOneUSERArgs>
  ): CheckSelect<T, USERClient<USER | null>, USERClient<USERGetPayload<T> | null>>
  /**
   * Find zero or more USERS.
   * @param {FindManyUSERArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all USERS
   * const uSERS = await prisma.uSER.findMany()
   * 
   * // Get first 10 USERS
   * const uSERS = await prisma.uSER.findMany({ first: 10 })
   * 
   * // Only select the `user_age`
   * const uSERWithUser_ageOnly = await prisma.uSER.findMany({ select: { user_age: true } })
   * 
  **/
  findMany<T extends FindManyUSERArgs>(
    args?: Subset<T, FindManyUSERArgs>
  ): CheckSelect<T, Promise<Array<USER>>, Promise<Array<USERGetPayload<T>>>>
  /**
   * Create a USER.
   * @param {USERCreateArgs} args - Arguments to create a USER.
   * @example
   * // Create one USER
   * const user = await prisma.uSER.create({
   *   data: {
   *     // ... data to create a USER
   *   }
   * })
   * 
  **/
  create<T extends USERCreateArgs>(
    args: Subset<T, USERCreateArgs>
  ): CheckSelect<T, USERClient<USER>, USERClient<USERGetPayload<T>>>
  /**
   * Delete a USER.
   * @param {USERDeleteArgs} args - Arguments to delete one USER.
   * @example
   * // Delete one USER
   * const user = await prisma.uSER.delete({
   *   where: {
   *     // ... filter to delete one USER
   *   }
   * })
   * 
  **/
  delete<T extends USERDeleteArgs>(
    args: Subset<T, USERDeleteArgs>
  ): CheckSelect<T, USERClient<USER>, USERClient<USERGetPayload<T>>>
  /**
   * Update one USER.
   * @param {USERUpdateArgs} args - Arguments to update one USER.
   * @example
   * // Update one USER
   * const uSER = await prisma.uSER.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends USERUpdateArgs>(
    args: Subset<T, USERUpdateArgs>
  ): CheckSelect<T, USERClient<USER>, USERClient<USERGetPayload<T>>>
  /**
   * Delete zero or more USERS.
   * @param {USERDeleteManyArgs} args - Arguments to filter USERS to delete.
   * @example
   * // Delete a few USERS
   * const { count } = await prisma.uSER.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends USERDeleteManyArgs>(
    args: Subset<T, USERDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more USERS.
   * @param {USERUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many USERS
   * const uSER = await prisma.uSER.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends USERUpdateManyArgs>(
    args: Subset<T, USERUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one USER.
   * @param {USERUpsertArgs} args - Arguments to update or create a USER.
   * @example
   * // Update or create a USER
   * const uSER = await prisma.uSER.upsert({
   *   create: {
   *     // ... data to create a USER
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the USER we want to update
   *   }
   * })
  **/
  upsert<T extends USERUpsertArgs>(
    args: Subset<T, USERUpsertArgs>
  ): CheckSelect<T, USERClient<USER>, USERClient<USERGetPayload<T>>>
  /**
   * 
   */
  count(args?: Omit<FindManyUSERArgs, 'select' | 'include'>): Promise<number>
}

export declare class USERClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  private _collectTimestamps?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  CATEGORY<T extends CATEGORYArgs = {}>(args?: Subset<T, CATEGORYArgs>): CheckSelect<T, CATEGORYClient<CATEGORY | null>, CATEGORYClient<CATEGORYGetPayload<T> | null>>;

  BOOK<T extends BOOKArgs = {}>(args?: Subset<T, BOOKArgs>): CheckSelect<T, BOOKClient<BOOK | null>, BOOKClient<BOOKGetPayload<T> | null>>;

  LOG<T extends FindManyLOGArgs = {}>(args?: Subset<T, FindManyLOGArgs>): CheckSelect<T, Promise<Array<LOG>>, Promise<Array<LOGGetPayload<T>>>>;

  User_BOOK<T extends FindManyUser_BOOKArgs = {}>(args?: Subset<T, FindManyUser_BOOKArgs>): CheckSelect<T, Promise<Array<User_BOOK>>, Promise<Array<User_BOOKGetPayload<T>>>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * USER findOne
 */
export type FindOneUSERArgs = {
  /**
   * Select specific fields to fetch from the USER
  **/
  select?: USERSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: USERInclude | null
  /**
   * Filter, which USER to fetch.
  **/
  where: USERWhereUniqueInput
}


/**
 * USER findMany
 */
export type FindManyUSERArgs = {
  /**
   * Select specific fields to fetch from the USER
  **/
  select?: USERSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: USERInclude | null
  /**
   * Filter, which USERS to fetch.
  **/
  where?: USERWhereInput
  /**
   * Determine the order of the USERS to fetch.
  **/
  orderBy?: USEROrderByInput
  /**
   * Sets the position for listing USERS.
  **/
  cursor?: USERWhereUniqueInput
  /**
   * Get all USERS that come after or before the USER you provide with the current order.
  **/
  take?: number
  /**
   * Skip the first `n` USERS.
  **/
  skip?: number
}


/**
 * USER create
 */
export type USERCreateArgs = {
  /**
   * Select specific fields to fetch from the USER
  **/
  select?: USERSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: USERInclude | null
  /**
   * The data needed to create a USER.
  **/
  data: USERCreateInput
}


/**
 * USER update
 */
export type USERUpdateArgs = {
  /**
   * Select specific fields to fetch from the USER
  **/
  select?: USERSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: USERInclude | null
  /**
   * The data needed to update a USER.
  **/
  data: USERUpdateInput
  /**
   * Choose, which USER to update.
  **/
  where: USERWhereUniqueInput
}


/**
 * USER updateMany
 */
export type USERUpdateManyArgs = {
  data: USERUpdateManyMutationInput
  where?: USERWhereInput
}


/**
 * USER upsert
 */
export type USERUpsertArgs = {
  /**
   * Select specific fields to fetch from the USER
  **/
  select?: USERSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: USERInclude | null
  /**
   * The filter to search for the USER to update in case it exists.
  **/
  where: USERWhereUniqueInput
  /**
   * In case the USER found by the `where` argument doesn't exist, create a new USER with this data.
  **/
  create: USERCreateInput
  /**
   * In case the USER was found with the provided `where` argument, update it with this data.
  **/
  update: USERUpdateInput
}


/**
 * USER delete
 */
export type USERDeleteArgs = {
  /**
   * Select specific fields to fetch from the USER
  **/
  select?: USERSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: USERInclude | null
  /**
   * Filter which USER to delete.
  **/
  where: USERWhereUniqueInput
}


/**
 * USER deleteMany
 */
export type USERDeleteManyArgs = {
  where?: USERWhereInput
}


/**
 * USER without action
 */
export type USERArgs = {
  /**
   * Select specific fields to fetch from the USER
  **/
  select?: USERSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: USERInclude | null
}



/**
 * Model User_BOOK
 */

export type User_BOOK = {
  book_num: number
  comment: string | null
  rating_scale: number | null
  user_book_AI: number
  user_ID: string
}

export type User_BOOKSelect = {
  book_num?: boolean
  comment?: boolean
  rating_scale?: boolean
  user_book_AI?: boolean
  user_ID?: boolean
  BOOK?: boolean | BOOKArgs
  USER?: boolean | USERArgs
}

export type User_BOOKInclude = {
  BOOK?: boolean | BOOKArgs
  USER?: boolean | USERArgs
}

export type User_BOOKGetPayload<
  S extends boolean | null | undefined | User_BOOKArgs,
  U = keyof S
> = S extends true
  ? User_BOOK
  : S extends undefined
  ? never
  : S extends User_BOOKArgs | FindManyUser_BOOKArgs
  ? 'include' extends U
    ? User_BOOK  & {
      [P in TrueKeys<S['include']>]:
      P extends 'BOOK'
      ? BOOKGetPayload<S['include'][P]> :
      P extends 'USER'
      ? USERGetPayload<S['include'][P]> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof User_BOOK ? User_BOOK[P]
: 
      P extends 'BOOK'
      ? BOOKGetPayload<S['select'][P]> :
      P extends 'USER'
      ? USERGetPayload<S['select'][P]> : never
    }
  : User_BOOK
: User_BOOK


export interface User_BOOKDelegate {
  /**
   * Find zero or one User_BOOK.
   * @param {FindOneUser_BOOKArgs} args - Arguments to find a User_BOOK
   * @example
   * // Get one User_BOOK
   * const user_BOOK = await prisma.user_BOOK.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneUser_BOOKArgs>(
    args: Subset<T, FindOneUser_BOOKArgs>
  ): CheckSelect<T, User_BOOKClient<User_BOOK | null>, User_BOOKClient<User_BOOKGetPayload<T> | null>>
  /**
   * Find zero or more User_BOOKS.
   * @param {FindManyUser_BOOKArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all User_BOOKS
   * const user_BOOKS = await prisma.user_BOOK.findMany()
   * 
   * // Get first 10 User_BOOKS
   * const user_BOOKS = await prisma.user_BOOK.findMany({ first: 10 })
   * 
   * // Only select the `book_num`
   * const user_BOOKWithBook_numOnly = await prisma.user_BOOK.findMany({ select: { book_num: true } })
   * 
  **/
  findMany<T extends FindManyUser_BOOKArgs>(
    args?: Subset<T, FindManyUser_BOOKArgs>
  ): CheckSelect<T, Promise<Array<User_BOOK>>, Promise<Array<User_BOOKGetPayload<T>>>>
  /**
   * Create a User_BOOK.
   * @param {User_BOOKCreateArgs} args - Arguments to create a User_BOOK.
   * @example
   * // Create one User_BOOK
   * const user = await prisma.user_BOOK.create({
   *   data: {
   *     // ... data to create a User_BOOK
   *   }
   * })
   * 
  **/
  create<T extends User_BOOKCreateArgs>(
    args: Subset<T, User_BOOKCreateArgs>
  ): CheckSelect<T, User_BOOKClient<User_BOOK>, User_BOOKClient<User_BOOKGetPayload<T>>>
  /**
   * Delete a User_BOOK.
   * @param {User_BOOKDeleteArgs} args - Arguments to delete one User_BOOK.
   * @example
   * // Delete one User_BOOK
   * const user = await prisma.user_BOOK.delete({
   *   where: {
   *     // ... filter to delete one User_BOOK
   *   }
   * })
   * 
  **/
  delete<T extends User_BOOKDeleteArgs>(
    args: Subset<T, User_BOOKDeleteArgs>
  ): CheckSelect<T, User_BOOKClient<User_BOOK>, User_BOOKClient<User_BOOKGetPayload<T>>>
  /**
   * Update one User_BOOK.
   * @param {User_BOOKUpdateArgs} args - Arguments to update one User_BOOK.
   * @example
   * // Update one User_BOOK
   * const user_BOOK = await prisma.user_BOOK.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends User_BOOKUpdateArgs>(
    args: Subset<T, User_BOOKUpdateArgs>
  ): CheckSelect<T, User_BOOKClient<User_BOOK>, User_BOOKClient<User_BOOKGetPayload<T>>>
  /**
   * Delete zero or more User_BOOKS.
   * @param {User_BOOKDeleteManyArgs} args - Arguments to filter User_BOOKS to delete.
   * @example
   * // Delete a few User_BOOKS
   * const { count } = await prisma.user_BOOK.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends User_BOOKDeleteManyArgs>(
    args: Subset<T, User_BOOKDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more User_BOOKS.
   * @param {User_BOOKUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many User_BOOKS
   * const user_BOOK = await prisma.user_BOOK.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends User_BOOKUpdateManyArgs>(
    args: Subset<T, User_BOOKUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one User_BOOK.
   * @param {User_BOOKUpsertArgs} args - Arguments to update or create a User_BOOK.
   * @example
   * // Update or create a User_BOOK
   * const user_BOOK = await prisma.user_BOOK.upsert({
   *   create: {
   *     // ... data to create a User_BOOK
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the User_BOOK we want to update
   *   }
   * })
  **/
  upsert<T extends User_BOOKUpsertArgs>(
    args: Subset<T, User_BOOKUpsertArgs>
  ): CheckSelect<T, User_BOOKClient<User_BOOK>, User_BOOKClient<User_BOOKGetPayload<T>>>
  /**
   * 
   */
  count(args?: Omit<FindManyUser_BOOKArgs, 'select' | 'include'>): Promise<number>
}

export declare class User_BOOKClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  private _collectTimestamps?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  BOOK<T extends BOOKArgs = {}>(args?: Subset<T, BOOKArgs>): CheckSelect<T, BOOKClient<BOOK | null>, BOOKClient<BOOKGetPayload<T> | null>>;

  USER<T extends USERArgs = {}>(args?: Subset<T, USERArgs>): CheckSelect<T, USERClient<USER | null>, USERClient<USERGetPayload<T> | null>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * User_BOOK findOne
 */
export type FindOneUser_BOOKArgs = {
  /**
   * Select specific fields to fetch from the User_BOOK
  **/
  select?: User_BOOKSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: User_BOOKInclude | null
  /**
   * Filter, which User_BOOK to fetch.
  **/
  where: User_BOOKWhereUniqueInput
}


/**
 * User_BOOK findMany
 */
export type FindManyUser_BOOKArgs = {
  /**
   * Select specific fields to fetch from the User_BOOK
  **/
  select?: User_BOOKSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: User_BOOKInclude | null
  /**
   * Filter, which User_BOOKS to fetch.
  **/
  where?: User_BOOKWhereInput
  /**
   * Determine the order of the User_BOOKS to fetch.
  **/
  orderBy?: User_BOOKOrderByInput
  /**
   * Sets the position for listing User_BOOKS.
  **/
  cursor?: User_BOOKWhereUniqueInput
  /**
   * Get all User_BOOKS that come after or before the User_BOOK you provide with the current order.
  **/
  take?: number
  /**
   * Skip the first `n` User_BOOKS.
  **/
  skip?: number
}


/**
 * User_BOOK create
 */
export type User_BOOKCreateArgs = {
  /**
   * Select specific fields to fetch from the User_BOOK
  **/
  select?: User_BOOKSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: User_BOOKInclude | null
  /**
   * The data needed to create a User_BOOK.
  **/
  data: User_BOOKCreateInput
}


/**
 * User_BOOK update
 */
export type User_BOOKUpdateArgs = {
  /**
   * Select specific fields to fetch from the User_BOOK
  **/
  select?: User_BOOKSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: User_BOOKInclude | null
  /**
   * The data needed to update a User_BOOK.
  **/
  data: User_BOOKUpdateInput
  /**
   * Choose, which User_BOOK to update.
  **/
  where: User_BOOKWhereUniqueInput
}


/**
 * User_BOOK updateMany
 */
export type User_BOOKUpdateManyArgs = {
  data: User_BOOKUpdateManyMutationInput
  where?: User_BOOKWhereInput
}


/**
 * User_BOOK upsert
 */
export type User_BOOKUpsertArgs = {
  /**
   * Select specific fields to fetch from the User_BOOK
  **/
  select?: User_BOOKSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: User_BOOKInclude | null
  /**
   * The filter to search for the User_BOOK to update in case it exists.
  **/
  where: User_BOOKWhereUniqueInput
  /**
   * In case the User_BOOK found by the `where` argument doesn't exist, create a new User_BOOK with this data.
  **/
  create: User_BOOKCreateInput
  /**
   * In case the User_BOOK was found with the provided `where` argument, update it with this data.
  **/
  update: User_BOOKUpdateInput
}


/**
 * User_BOOK delete
 */
export type User_BOOKDeleteArgs = {
  /**
   * Select specific fields to fetch from the User_BOOK
  **/
  select?: User_BOOKSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: User_BOOKInclude | null
  /**
   * Filter which User_BOOK to delete.
  **/
  where: User_BOOKWhereUniqueInput
}


/**
 * User_BOOK deleteMany
 */
export type User_BOOKDeleteManyArgs = {
  where?: User_BOOKWhereInput
}


/**
 * User_BOOK without action
 */
export type User_BOOKArgs = {
  /**
   * Select specific fields to fetch from the User_BOOK
  **/
  select?: User_BOOKSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: User_BOOKInclude | null
}



/**
 * Deep Input Types
 */


export type LOGWhereInput = {
  book_category?: number | IntFilter
  book_num?: number | IntFilter
  L_AI?: number | IntFilter
  search_time?: Date | string | DateTimeFilter
  user_ID?: string | StringFilter
  AND?: Enumerable<LOGWhereInput>
  OR?: Enumerable<LOGWhereInput>
  NOT?: Enumerable<LOGWhereInput>
  BOOK_BOOKToLOG_book_category?: BOOKWhereInput | null
  BOOK_BOOKToLOG_book_num?: BOOKWhereInput | null
  USER?: USERWhereInput | null
}

export type User_BOOKWhereInput = {
  book_num?: number | IntFilter
  comment?: string | NullableStringFilter | null
  rating_scale?: number | NullableFloatFilter | null
  user_book_AI?: number | IntFilter
  user_ID?: string | StringFilter
  AND?: Enumerable<User_BOOKWhereInput>
  OR?: Enumerable<User_BOOKWhereInput>
  NOT?: Enumerable<User_BOOKWhereInput>
  BOOK?: BOOKWhereInput | null
  USER?: USERWhereInput | null
}

export type USERWhereInput = {
  user_age?: number | NullableIntFilter | null
  user_category?: number | NullableIntFilter | null
  user_gender?: string | NullableStringFilter | null
  user_ID?: string | StringFilter
  user_mindbook?: number | NullableIntFilter | null
  user_name?: string | StringFilter
  user_password?: string | StringFilter
  user_phone?: string | StringFilter
  LOG?: LOGFilter | null
  User_BOOK?: User_BOOKFilter | null
  AND?: Enumerable<USERWhereInput>
  OR?: Enumerable<USERWhereInput>
  NOT?: Enumerable<USERWhereInput>
  CATEGORY?: CATEGORYWhereInput | null
  BOOK?: BOOKWhereInput | null
}

export type CATEGORYWhereInput = {
  category_name?: string | StringFilter
  category_num?: number | IntFilter
  BOOK?: BOOKFilter | null
  USER?: USERFilter | null
  AND?: Enumerable<CATEGORYWhereInput>
  OR?: Enumerable<CATEGORYWhereInput>
  NOT?: Enumerable<CATEGORYWhereInput>
}

export type LIBRARYWhereInput = {
  lib_location?: string | NullableStringFilter | null
  lib_name?: string | NullableStringFilter | null
  lib_num?: number | IntFilter
  lib_phone?: string | NullableStringFilter | null
  LIB_OWN_BOOK?: LIB_OWN_BOOKFilter | null
  AND?: Enumerable<LIBRARYWhereInput>
  OR?: Enumerable<LIBRARYWhereInput>
  NOT?: Enumerable<LIBRARYWhereInput>
}

export type LIB_OWN_BOOKWhereInput = {
  book_num?: number | IntFilter
  book_sector?: string | StringFilter
  lib_num?: number | IntFilter
  LOB_AI?: number | IntFilter
  retention?: string | StringFilter
  AND?: Enumerable<LIB_OWN_BOOKWhereInput>
  OR?: Enumerable<LIB_OWN_BOOKWhereInput>
  NOT?: Enumerable<LIB_OWN_BOOKWhereInput>
  BOOK?: BOOKWhereInput | null
  LIBRARY?: LIBRARYWhereInput | null
}

export type BOOKWhereInput = {
  book_author?: string | NullableStringFilter | null
  book_category?: number | IntFilter
  book_name?: string | StringFilter
  book_num?: number | IntFilter
  book_picture?: string | NullableStringFilter | null
  book_publisher?: string | NullableStringFilter | null
  book_side_pic?: string | NullableStringFilter | null
  book_year?: string | NullableStringFilter | null
  LIB_OWN_BOOK?: LIB_OWN_BOOKFilter | null
  LOG_BOOKToLOG_book_category?: LOGFilter | null
  LOG_BOOKToLOG_book_num?: LOGFilter | null
  USER?: USERFilter | null
  User_BOOK?: User_BOOKFilter | null
  AND?: Enumerable<BOOKWhereInput>
  OR?: Enumerable<BOOKWhereInput>
  NOT?: Enumerable<BOOKWhereInput>
  CATEGORY?: CATEGORYWhereInput | null
}

export type BOOKWhereUniqueInput = {
  book_category?: number
  book_num?: number
}

export type USERWhereUniqueInput = {
  user_category?: number | null
  user_ID?: string
  user_mindbook?: number | null
}

export type LOGWhereUniqueInput = {
  book_category?: number
  book_num?: number
  L_AI?: number
  user_ID?: string
}

export type User_BOOKWhereUniqueInput = {
  book_num?: number
  user_book_AI?: number
  user_ID?: string
}

export type LIB_OWN_BOOKWhereUniqueInput = {
  book_num?: number
  lib_num?: number
  LOB_AI?: number
}

export type CATEGORYWhereUniqueInput = {
  category_num?: number
}

export type LIBRARYWhereUniqueInput = {
  lib_num?: number
}

export type LIBRARYCreateWithoutLIB_OWN_BOOKInput = {
  lib_location?: string | null
  lib_name?: string | null
  lib_phone?: string | null
}

export type LIBRARYCreateOneWithoutLIB_OWN_BOOKInput = {
  create?: LIBRARYCreateWithoutLIB_OWN_BOOKInput
  connect?: LIBRARYWhereUniqueInput
}

export type LIB_OWN_BOOKCreateWithoutBOOKInput = {
  book_sector: string
  retention: string
  LIBRARY: LIBRARYCreateOneWithoutLIB_OWN_BOOKInput
}

export type LIB_OWN_BOOKCreateManyWithoutBOOKInput = {
  create?: Enumerable<LIB_OWN_BOOKCreateWithoutBOOKInput>
  connect?: Enumerable<LIB_OWN_BOOKWhereUniqueInput>
}

export type LOGCreateWithoutUSERInput = {
  search_time?: Date | string
  BOOK_BOOKToLOG_book_category: BOOKCreateOneWithoutLOG_BOOKToLOG_book_categoryInput
  BOOK_BOOKToLOG_book_num: BOOKCreateOneWithoutLOG_BOOKToLOG_book_numInput
}

export type LOGCreateManyWithoutUSERInput = {
  create?: Enumerable<LOGCreateWithoutUSERInput>
  connect?: Enumerable<LOGWhereUniqueInput>
}

export type USERCreateWithoutUser_BOOKInput = {
  user_age?: number | null
  user_gender?: string | null
  user_ID: string
  user_name: string
  user_password: string
  user_phone: string
  CATEGORY?: CATEGORYCreateOneWithoutUSERInput | null
  BOOK?: BOOKCreateOneWithoutUSERInput | null
  LOG?: LOGCreateManyWithoutUSERInput | null
}

export type USERCreateOneWithoutUser_BOOKInput = {
  create?: USERCreateWithoutUser_BOOKInput
  connect?: USERWhereUniqueInput
}

export type User_BOOKCreateWithoutBOOKInput = {
  comment?: string | null
  rating_scale?: number | null
  USER: USERCreateOneWithoutUser_BOOKInput
}

export type User_BOOKCreateManyWithoutBOOKInput = {
  create?: Enumerable<User_BOOKCreateWithoutBOOKInput>
  connect?: Enumerable<User_BOOKWhereUniqueInput>
}

export type BOOKCreateWithoutLOG_BOOKToLOG_book_categoryInput = {
  book_author?: string | null
  book_name: string
  book_picture?: string | null
  book_publisher?: string | null
  book_side_pic?: string | null
  book_year?: string | null
  CATEGORY: CATEGORYCreateOneWithoutBOOKInput
  LIB_OWN_BOOK?: LIB_OWN_BOOKCreateManyWithoutBOOKInput | null
  LOG_BOOKToLOG_book_num?: LOGCreateManyWithoutBOOK_BOOKToLOG_book_numInput | null
  USER?: USERCreateManyWithoutBOOKInput | null
  User_BOOK?: User_BOOKCreateManyWithoutBOOKInput | null
}

export type BOOKCreateOneWithoutLOG_BOOKToLOG_book_categoryInput = {
  create?: BOOKCreateWithoutLOG_BOOKToLOG_book_categoryInput
  connect?: BOOKWhereUniqueInput
}

export type BOOKCreateWithoutUser_BOOKInput = {
  book_author?: string | null
  book_name: string
  book_picture?: string | null
  book_publisher?: string | null
  book_side_pic?: string | null
  book_year?: string | null
  CATEGORY: CATEGORYCreateOneWithoutBOOKInput
  LIB_OWN_BOOK?: LIB_OWN_BOOKCreateManyWithoutBOOKInput | null
  LOG_BOOKToLOG_book_category?: LOGCreateManyWithoutBOOK_BOOKToLOG_book_categoryInput | null
  LOG_BOOKToLOG_book_num?: LOGCreateManyWithoutBOOK_BOOKToLOG_book_numInput | null
  USER?: USERCreateManyWithoutBOOKInput | null
}

export type BOOKCreateOneWithoutUser_BOOKInput = {
  create?: BOOKCreateWithoutUser_BOOKInput
  connect?: BOOKWhereUniqueInput
}

export type User_BOOKCreateWithoutUSERInput = {
  comment?: string | null
  rating_scale?: number | null
  BOOK: BOOKCreateOneWithoutUser_BOOKInput
}

export type User_BOOKCreateManyWithoutUSERInput = {
  create?: Enumerable<User_BOOKCreateWithoutUSERInput>
  connect?: Enumerable<User_BOOKWhereUniqueInput>
}

export type USERCreateWithoutLOGInput = {
  user_age?: number | null
  user_gender?: string | null
  user_ID: string
  user_name: string
  user_password: string
  user_phone: string
  CATEGORY?: CATEGORYCreateOneWithoutUSERInput | null
  BOOK?: BOOKCreateOneWithoutUSERInput | null
  User_BOOK?: User_BOOKCreateManyWithoutUSERInput | null
}

export type USERCreateOneWithoutLOGInput = {
  create?: USERCreateWithoutLOGInput
  connect?: USERWhereUniqueInput
}

export type LOGCreateWithoutBOOK_BOOKToLOG_book_numInput = {
  search_time?: Date | string
  BOOK_BOOKToLOG_book_category: BOOKCreateOneWithoutLOG_BOOKToLOG_book_categoryInput
  USER: USERCreateOneWithoutLOGInput
}

export type LOGCreateManyWithoutBOOK_BOOKToLOG_book_numInput = {
  create?: Enumerable<LOGCreateWithoutBOOK_BOOKToLOG_book_numInput>
  connect?: Enumerable<LOGWhereUniqueInput>
}

export type BOOKCreateWithoutCATEGORYInput = {
  book_author?: string | null
  book_name: string
  book_picture?: string | null
  book_publisher?: string | null
  book_side_pic?: string | null
  book_year?: string | null
  LIB_OWN_BOOK?: LIB_OWN_BOOKCreateManyWithoutBOOKInput | null
  LOG_BOOKToLOG_book_category?: LOGCreateManyWithoutBOOK_BOOKToLOG_book_categoryInput | null
  LOG_BOOKToLOG_book_num?: LOGCreateManyWithoutBOOK_BOOKToLOG_book_numInput | null
  USER?: USERCreateManyWithoutBOOKInput | null
  User_BOOK?: User_BOOKCreateManyWithoutBOOKInput | null
}

export type BOOKCreateManyWithoutCATEGORYInput = {
  create?: Enumerable<BOOKCreateWithoutCATEGORYInput>
  connect?: Enumerable<BOOKWhereUniqueInput>
}

export type CATEGORYCreateWithoutUSERInput = {
  category_name: string
  category_num: number
  BOOK?: BOOKCreateManyWithoutCATEGORYInput | null
}

export type CATEGORYCreateOneWithoutUSERInput = {
  create?: CATEGORYCreateWithoutUSERInput
  connect?: CATEGORYWhereUniqueInput
}

export type USERCreateWithoutBOOKInput = {
  user_age?: number | null
  user_gender?: string | null
  user_ID: string
  user_name: string
  user_password: string
  user_phone: string
  CATEGORY?: CATEGORYCreateOneWithoutUSERInput | null
  LOG?: LOGCreateManyWithoutUSERInput | null
  User_BOOK?: User_BOOKCreateManyWithoutUSERInput | null
}

export type USERCreateManyWithoutBOOKInput = {
  create?: Enumerable<USERCreateWithoutBOOKInput>
  connect?: Enumerable<USERWhereUniqueInput>
}

export type BOOKCreateWithoutLOG_BOOKToLOG_book_numInput = {
  book_author?: string | null
  book_name: string
  book_picture?: string | null
  book_publisher?: string | null
  book_side_pic?: string | null
  book_year?: string | null
  CATEGORY: CATEGORYCreateOneWithoutBOOKInput
  LIB_OWN_BOOK?: LIB_OWN_BOOKCreateManyWithoutBOOKInput | null
  LOG_BOOKToLOG_book_category?: LOGCreateManyWithoutBOOK_BOOKToLOG_book_categoryInput | null
  USER?: USERCreateManyWithoutBOOKInput | null
  User_BOOK?: User_BOOKCreateManyWithoutBOOKInput | null
}

export type BOOKCreateOneWithoutLOG_BOOKToLOG_book_numInput = {
  create?: BOOKCreateWithoutLOG_BOOKToLOG_book_numInput
  connect?: BOOKWhereUniqueInput
}

export type LOGCreateWithoutBOOK_BOOKToLOG_book_categoryInput = {
  search_time?: Date | string
  BOOK_BOOKToLOG_book_num: BOOKCreateOneWithoutLOG_BOOKToLOG_book_numInput
  USER: USERCreateOneWithoutLOGInput
}

export type LOGCreateManyWithoutBOOK_BOOKToLOG_book_categoryInput = {
  create?: Enumerable<LOGCreateWithoutBOOK_BOOKToLOG_book_categoryInput>
  connect?: Enumerable<LOGWhereUniqueInput>
}

export type BOOKCreateWithoutUSERInput = {
  book_author?: string | null
  book_name: string
  book_picture?: string | null
  book_publisher?: string | null
  book_side_pic?: string | null
  book_year?: string | null
  CATEGORY: CATEGORYCreateOneWithoutBOOKInput
  LIB_OWN_BOOK?: LIB_OWN_BOOKCreateManyWithoutBOOKInput | null
  LOG_BOOKToLOG_book_category?: LOGCreateManyWithoutBOOK_BOOKToLOG_book_categoryInput | null
  LOG_BOOKToLOG_book_num?: LOGCreateManyWithoutBOOK_BOOKToLOG_book_numInput | null
  User_BOOK?: User_BOOKCreateManyWithoutBOOKInput | null
}

export type BOOKCreateOneWithoutUSERInput = {
  create?: BOOKCreateWithoutUSERInput
  connect?: BOOKWhereUniqueInput
}

export type USERCreateWithoutCATEGORYInput = {
  user_age?: number | null
  user_gender?: string | null
  user_ID: string
  user_name: string
  user_password: string
  user_phone: string
  BOOK?: BOOKCreateOneWithoutUSERInput | null
  LOG?: LOGCreateManyWithoutUSERInput | null
  User_BOOK?: User_BOOKCreateManyWithoutUSERInput | null
}

export type USERCreateManyWithoutCATEGORYInput = {
  create?: Enumerable<USERCreateWithoutCATEGORYInput>
  connect?: Enumerable<USERWhereUniqueInput>
}

export type CATEGORYCreateWithoutBOOKInput = {
  category_name: string
  category_num: number
  USER?: USERCreateManyWithoutCATEGORYInput | null
}

export type CATEGORYCreateOneWithoutBOOKInput = {
  create?: CATEGORYCreateWithoutBOOKInput
  connect?: CATEGORYWhereUniqueInput
}

export type BOOKCreateInput = {
  book_author?: string | null
  book_name: string
  book_picture?: string | null
  book_publisher?: string | null
  book_side_pic?: string | null
  book_year?: string | null
  CATEGORY: CATEGORYCreateOneWithoutBOOKInput
  LIB_OWN_BOOK?: LIB_OWN_BOOKCreateManyWithoutBOOKInput | null
  LOG_BOOKToLOG_book_category?: LOGCreateManyWithoutBOOK_BOOKToLOG_book_categoryInput | null
  LOG_BOOKToLOG_book_num?: LOGCreateManyWithoutBOOK_BOOKToLOG_book_numInput | null
  USER?: USERCreateManyWithoutBOOKInput | null
  User_BOOK?: User_BOOKCreateManyWithoutBOOKInput | null
}

export type LIBRARYUpdateWithoutLIB_OWN_BOOKDataInput = {
  lib_location?: string | null
  lib_name?: string | null
  lib_num?: number
  lib_phone?: string | null
}

export type LIBRARYUpsertWithoutLIB_OWN_BOOKInput = {
  update: LIBRARYUpdateWithoutLIB_OWN_BOOKDataInput
  create: LIBRARYCreateWithoutLIB_OWN_BOOKInput
}

export type LIBRARYUpdateOneRequiredWithoutLIB_OWN_BOOKInput = {
  create?: LIBRARYCreateWithoutLIB_OWN_BOOKInput
  connect?: LIBRARYWhereUniqueInput
  update?: LIBRARYUpdateWithoutLIB_OWN_BOOKDataInput
  upsert?: LIBRARYUpsertWithoutLIB_OWN_BOOKInput
}

export type LIB_OWN_BOOKUpdateWithoutBOOKDataInput = {
  book_sector?: string
  LOB_AI?: number
  retention?: string
  LIBRARY?: LIBRARYUpdateOneRequiredWithoutLIB_OWN_BOOKInput
}

export type LIB_OWN_BOOKUpdateWithWhereUniqueWithoutBOOKInput = {
  where: LIB_OWN_BOOKWhereUniqueInput
  data: LIB_OWN_BOOKUpdateWithoutBOOKDataInput
}

export type LIB_OWN_BOOKScalarWhereInput = {
  book_num?: number | IntFilter
  book_sector?: string | StringFilter
  lib_num?: number | IntFilter
  LOB_AI?: number | IntFilter
  retention?: string | StringFilter
  AND?: Enumerable<LIB_OWN_BOOKScalarWhereInput>
  OR?: Enumerable<LIB_OWN_BOOKScalarWhereInput>
  NOT?: Enumerable<LIB_OWN_BOOKScalarWhereInput>
}

export type LIB_OWN_BOOKUpdateManyDataInput = {
  book_sector?: string
  LOB_AI?: number
  retention?: string
}

export type LIB_OWN_BOOKUpdateManyWithWhereNestedInput = {
  where: LIB_OWN_BOOKScalarWhereInput
  data: LIB_OWN_BOOKUpdateManyDataInput
}

export type LIB_OWN_BOOKUpsertWithWhereUniqueWithoutBOOKInput = {
  where: LIB_OWN_BOOKWhereUniqueInput
  update: LIB_OWN_BOOKUpdateWithoutBOOKDataInput
  create: LIB_OWN_BOOKCreateWithoutBOOKInput
}

export type LIB_OWN_BOOKUpdateManyWithoutBOOKInput = {
  create?: Enumerable<LIB_OWN_BOOKCreateWithoutBOOKInput>
  connect?: Enumerable<LIB_OWN_BOOKWhereUniqueInput>
  set?: Enumerable<LIB_OWN_BOOKWhereUniqueInput>
  disconnect?: Enumerable<LIB_OWN_BOOKWhereUniqueInput>
  delete?: Enumerable<LIB_OWN_BOOKWhereUniqueInput>
  update?: Enumerable<LIB_OWN_BOOKUpdateWithWhereUniqueWithoutBOOKInput>
  updateMany?: Enumerable<LIB_OWN_BOOKUpdateManyWithWhereNestedInput>
  deleteMany?: Enumerable<LIB_OWN_BOOKScalarWhereInput>
  upsert?: Enumerable<LIB_OWN_BOOKUpsertWithWhereUniqueWithoutBOOKInput>
}

export type LOGUpdateWithoutUSERDataInput = {
  L_AI?: number
  search_time?: Date | string
  BOOK_BOOKToLOG_book_category?: BOOKUpdateOneRequiredWithoutLOG_BOOKToLOG_book_categoryInput
  BOOK_BOOKToLOG_book_num?: BOOKUpdateOneRequiredWithoutLOG_BOOKToLOG_book_numInput
}

export type LOGUpdateWithWhereUniqueWithoutUSERInput = {
  where: LOGWhereUniqueInput
  data: LOGUpdateWithoutUSERDataInput
}

export type LOGScalarWhereInput = {
  book_category?: number | IntFilter
  book_num?: number | IntFilter
  L_AI?: number | IntFilter
  search_time?: Date | string | DateTimeFilter
  user_ID?: string | StringFilter
  AND?: Enumerable<LOGScalarWhereInput>
  OR?: Enumerable<LOGScalarWhereInput>
  NOT?: Enumerable<LOGScalarWhereInput>
}

export type LOGUpdateManyDataInput = {
  L_AI?: number
  search_time?: Date | string
}

export type LOGUpdateManyWithWhereNestedInput = {
  where: LOGScalarWhereInput
  data: LOGUpdateManyDataInput
}

export type LOGUpsertWithWhereUniqueWithoutUSERInput = {
  where: LOGWhereUniqueInput
  update: LOGUpdateWithoutUSERDataInput
  create: LOGCreateWithoutUSERInput
}

export type LOGUpdateManyWithoutUSERInput = {
  create?: Enumerable<LOGCreateWithoutUSERInput>
  connect?: Enumerable<LOGWhereUniqueInput>
  set?: Enumerable<LOGWhereUniqueInput>
  disconnect?: Enumerable<LOGWhereUniqueInput>
  delete?: Enumerable<LOGWhereUniqueInput>
  update?: Enumerable<LOGUpdateWithWhereUniqueWithoutUSERInput>
  updateMany?: Enumerable<LOGUpdateManyWithWhereNestedInput>
  deleteMany?: Enumerable<LOGScalarWhereInput>
  upsert?: Enumerable<LOGUpsertWithWhereUniqueWithoutUSERInput>
}

export type USERUpdateWithoutUser_BOOKDataInput = {
  user_age?: number | null
  user_gender?: string | null
  user_ID?: string
  user_name?: string
  user_password?: string
  user_phone?: string
  CATEGORY?: CATEGORYUpdateOneWithoutUSERInput
  BOOK?: BOOKUpdateOneWithoutUSERInput
  LOG?: LOGUpdateManyWithoutUSERInput
}

export type USERUpsertWithoutUser_BOOKInput = {
  update: USERUpdateWithoutUser_BOOKDataInput
  create: USERCreateWithoutUser_BOOKInput
}

export type USERUpdateOneRequiredWithoutUser_BOOKInput = {
  create?: USERCreateWithoutUser_BOOKInput
  connect?: USERWhereUniqueInput
  update?: USERUpdateWithoutUser_BOOKDataInput
  upsert?: USERUpsertWithoutUser_BOOKInput
}

export type User_BOOKUpdateWithoutBOOKDataInput = {
  comment?: string | null
  rating_scale?: number | null
  user_book_AI?: number
  USER?: USERUpdateOneRequiredWithoutUser_BOOKInput
}

export type User_BOOKUpdateWithWhereUniqueWithoutBOOKInput = {
  where: User_BOOKWhereUniqueInput
  data: User_BOOKUpdateWithoutBOOKDataInput
}

export type User_BOOKScalarWhereInput = {
  book_num?: number | IntFilter
  comment?: string | NullableStringFilter | null
  rating_scale?: number | NullableFloatFilter | null
  user_book_AI?: number | IntFilter
  user_ID?: string | StringFilter
  AND?: Enumerable<User_BOOKScalarWhereInput>
  OR?: Enumerable<User_BOOKScalarWhereInput>
  NOT?: Enumerable<User_BOOKScalarWhereInput>
}

export type User_BOOKUpdateManyDataInput = {
  comment?: string | null
  rating_scale?: number | null
  user_book_AI?: number
}

export type User_BOOKUpdateManyWithWhereNestedInput = {
  where: User_BOOKScalarWhereInput
  data: User_BOOKUpdateManyDataInput
}

export type User_BOOKUpsertWithWhereUniqueWithoutBOOKInput = {
  where: User_BOOKWhereUniqueInput
  update: User_BOOKUpdateWithoutBOOKDataInput
  create: User_BOOKCreateWithoutBOOKInput
}

export type User_BOOKUpdateManyWithoutBOOKInput = {
  create?: Enumerable<User_BOOKCreateWithoutBOOKInput>
  connect?: Enumerable<User_BOOKWhereUniqueInput>
  set?: Enumerable<User_BOOKWhereUniqueInput>
  disconnect?: Enumerable<User_BOOKWhereUniqueInput>
  delete?: Enumerable<User_BOOKWhereUniqueInput>
  update?: Enumerable<User_BOOKUpdateWithWhereUniqueWithoutBOOKInput>
  updateMany?: Enumerable<User_BOOKUpdateManyWithWhereNestedInput>
  deleteMany?: Enumerable<User_BOOKScalarWhereInput>
  upsert?: Enumerable<User_BOOKUpsertWithWhereUniqueWithoutBOOKInput>
}

export type BOOKUpdateWithoutLOG_BOOKToLOG_book_categoryDataInput = {
  book_author?: string | null
  book_name?: string
  book_num?: number
  book_picture?: string | null
  book_publisher?: string | null
  book_side_pic?: string | null
  book_year?: string | null
  CATEGORY?: CATEGORYUpdateOneRequiredWithoutBOOKInput
  LIB_OWN_BOOK?: LIB_OWN_BOOKUpdateManyWithoutBOOKInput
  LOG_BOOKToLOG_book_num?: LOGUpdateManyWithoutBOOK_BOOKToLOG_book_numInput
  USER?: USERUpdateManyWithoutBOOKInput
  User_BOOK?: User_BOOKUpdateManyWithoutBOOKInput
}

export type BOOKUpsertWithoutLOG_BOOKToLOG_book_categoryInput = {
  update: BOOKUpdateWithoutLOG_BOOKToLOG_book_categoryDataInput
  create: BOOKCreateWithoutLOG_BOOKToLOG_book_categoryInput
}

export type BOOKUpdateOneRequiredWithoutLOG_BOOKToLOG_book_categoryInput = {
  create?: BOOKCreateWithoutLOG_BOOKToLOG_book_categoryInput
  connect?: BOOKWhereUniqueInput
  update?: BOOKUpdateWithoutLOG_BOOKToLOG_book_categoryDataInput
  upsert?: BOOKUpsertWithoutLOG_BOOKToLOG_book_categoryInput
}

export type BOOKUpdateWithoutUser_BOOKDataInput = {
  book_author?: string | null
  book_name?: string
  book_num?: number
  book_picture?: string | null
  book_publisher?: string | null
  book_side_pic?: string | null
  book_year?: string | null
  CATEGORY?: CATEGORYUpdateOneRequiredWithoutBOOKInput
  LIB_OWN_BOOK?: LIB_OWN_BOOKUpdateManyWithoutBOOKInput
  LOG_BOOKToLOG_book_category?: LOGUpdateManyWithoutBOOK_BOOKToLOG_book_categoryInput
  LOG_BOOKToLOG_book_num?: LOGUpdateManyWithoutBOOK_BOOKToLOG_book_numInput
  USER?: USERUpdateManyWithoutBOOKInput
}

export type BOOKUpsertWithoutUser_BOOKInput = {
  update: BOOKUpdateWithoutUser_BOOKDataInput
  create: BOOKCreateWithoutUser_BOOKInput
}

export type BOOKUpdateOneRequiredWithoutUser_BOOKInput = {
  create?: BOOKCreateWithoutUser_BOOKInput
  connect?: BOOKWhereUniqueInput
  update?: BOOKUpdateWithoutUser_BOOKDataInput
  upsert?: BOOKUpsertWithoutUser_BOOKInput
}

export type User_BOOKUpdateWithoutUSERDataInput = {
  comment?: string | null
  rating_scale?: number | null
  user_book_AI?: number
  BOOK?: BOOKUpdateOneRequiredWithoutUser_BOOKInput
}

export type User_BOOKUpdateWithWhereUniqueWithoutUSERInput = {
  where: User_BOOKWhereUniqueInput
  data: User_BOOKUpdateWithoutUSERDataInput
}

export type User_BOOKUpsertWithWhereUniqueWithoutUSERInput = {
  where: User_BOOKWhereUniqueInput
  update: User_BOOKUpdateWithoutUSERDataInput
  create: User_BOOKCreateWithoutUSERInput
}

export type User_BOOKUpdateManyWithoutUSERInput = {
  create?: Enumerable<User_BOOKCreateWithoutUSERInput>
  connect?: Enumerable<User_BOOKWhereUniqueInput>
  set?: Enumerable<User_BOOKWhereUniqueInput>
  disconnect?: Enumerable<User_BOOKWhereUniqueInput>
  delete?: Enumerable<User_BOOKWhereUniqueInput>
  update?: Enumerable<User_BOOKUpdateWithWhereUniqueWithoutUSERInput>
  updateMany?: Enumerable<User_BOOKUpdateManyWithWhereNestedInput>
  deleteMany?: Enumerable<User_BOOKScalarWhereInput>
  upsert?: Enumerable<User_BOOKUpsertWithWhereUniqueWithoutUSERInput>
}

export type USERUpdateWithoutLOGDataInput = {
  user_age?: number | null
  user_gender?: string | null
  user_ID?: string
  user_name?: string
  user_password?: string
  user_phone?: string
  CATEGORY?: CATEGORYUpdateOneWithoutUSERInput
  BOOK?: BOOKUpdateOneWithoutUSERInput
  User_BOOK?: User_BOOKUpdateManyWithoutUSERInput
}

export type USERUpsertWithoutLOGInput = {
  update: USERUpdateWithoutLOGDataInput
  create: USERCreateWithoutLOGInput
}

export type USERUpdateOneRequiredWithoutLOGInput = {
  create?: USERCreateWithoutLOGInput
  connect?: USERWhereUniqueInput
  update?: USERUpdateWithoutLOGDataInput
  upsert?: USERUpsertWithoutLOGInput
}

export type LOGUpdateWithoutBOOK_BOOKToLOG_book_numDataInput = {
  L_AI?: number
  search_time?: Date | string
  BOOK_BOOKToLOG_book_category?: BOOKUpdateOneRequiredWithoutLOG_BOOKToLOG_book_categoryInput
  USER?: USERUpdateOneRequiredWithoutLOGInput
}

export type LOGUpdateWithWhereUniqueWithoutBOOK_BOOKToLOG_book_numInput = {
  where: LOGWhereUniqueInput
  data: LOGUpdateWithoutBOOK_BOOKToLOG_book_numDataInput
}

export type LOGUpsertWithWhereUniqueWithoutBOOK_BOOKToLOG_book_numInput = {
  where: LOGWhereUniqueInput
  update: LOGUpdateWithoutBOOK_BOOKToLOG_book_numDataInput
  create: LOGCreateWithoutBOOK_BOOKToLOG_book_numInput
}

export type LOGUpdateManyWithoutBOOK_BOOKToLOG_book_numInput = {
  create?: Enumerable<LOGCreateWithoutBOOK_BOOKToLOG_book_numInput>
  connect?: Enumerable<LOGWhereUniqueInput>
  set?: Enumerable<LOGWhereUniqueInput>
  disconnect?: Enumerable<LOGWhereUniqueInput>
  delete?: Enumerable<LOGWhereUniqueInput>
  update?: Enumerable<LOGUpdateWithWhereUniqueWithoutBOOK_BOOKToLOG_book_numInput>
  updateMany?: Enumerable<LOGUpdateManyWithWhereNestedInput>
  deleteMany?: Enumerable<LOGScalarWhereInput>
  upsert?: Enumerable<LOGUpsertWithWhereUniqueWithoutBOOK_BOOKToLOG_book_numInput>
}

export type BOOKUpdateWithoutCATEGORYDataInput = {
  book_author?: string | null
  book_name?: string
  book_num?: number
  book_picture?: string | null
  book_publisher?: string | null
  book_side_pic?: string | null
  book_year?: string | null
  LIB_OWN_BOOK?: LIB_OWN_BOOKUpdateManyWithoutBOOKInput
  LOG_BOOKToLOG_book_category?: LOGUpdateManyWithoutBOOK_BOOKToLOG_book_categoryInput
  LOG_BOOKToLOG_book_num?: LOGUpdateManyWithoutBOOK_BOOKToLOG_book_numInput
  USER?: USERUpdateManyWithoutBOOKInput
  User_BOOK?: User_BOOKUpdateManyWithoutBOOKInput
}

export type BOOKUpdateWithWhereUniqueWithoutCATEGORYInput = {
  where: BOOKWhereUniqueInput
  data: BOOKUpdateWithoutCATEGORYDataInput
}

export type BOOKScalarWhereInput = {
  book_author?: string | NullableStringFilter | null
  book_category?: number | IntFilter
  book_name?: string | StringFilter
  book_num?: number | IntFilter
  book_picture?: string | NullableStringFilter | null
  book_publisher?: string | NullableStringFilter | null
  book_side_pic?: string | NullableStringFilter | null
  book_year?: string | NullableStringFilter | null
  LIB_OWN_BOOK?: LIB_OWN_BOOKFilter | null
  LOG_BOOKToLOG_book_category?: LOGFilter | null
  LOG_BOOKToLOG_book_num?: LOGFilter | null
  USER?: USERFilter | null
  User_BOOK?: User_BOOKFilter | null
  AND?: Enumerable<BOOKScalarWhereInput>
  OR?: Enumerable<BOOKScalarWhereInput>
  NOT?: Enumerable<BOOKScalarWhereInput>
}

export type BOOKUpdateManyDataInput = {
  book_author?: string | null
  book_name?: string
  book_num?: number
  book_picture?: string | null
  book_publisher?: string | null
  book_side_pic?: string | null
  book_year?: string | null
}

export type BOOKUpdateManyWithWhereNestedInput = {
  where: BOOKScalarWhereInput
  data: BOOKUpdateManyDataInput
}

export type BOOKUpsertWithWhereUniqueWithoutCATEGORYInput = {
  where: BOOKWhereUniqueInput
  update: BOOKUpdateWithoutCATEGORYDataInput
  create: BOOKCreateWithoutCATEGORYInput
}

export type BOOKUpdateManyWithoutCATEGORYInput = {
  create?: Enumerable<BOOKCreateWithoutCATEGORYInput>
  connect?: Enumerable<BOOKWhereUniqueInput>
  set?: Enumerable<BOOKWhereUniqueInput>
  disconnect?: Enumerable<BOOKWhereUniqueInput>
  delete?: Enumerable<BOOKWhereUniqueInput>
  update?: Enumerable<BOOKUpdateWithWhereUniqueWithoutCATEGORYInput>
  updateMany?: Enumerable<BOOKUpdateManyWithWhereNestedInput>
  deleteMany?: Enumerable<BOOKScalarWhereInput>
  upsert?: Enumerable<BOOKUpsertWithWhereUniqueWithoutCATEGORYInput>
}

export type CATEGORYUpdateWithoutUSERDataInput = {
  category_name?: string
  category_num?: number
  BOOK?: BOOKUpdateManyWithoutCATEGORYInput
}

export type CATEGORYUpsertWithoutUSERInput = {
  update: CATEGORYUpdateWithoutUSERDataInput
  create: CATEGORYCreateWithoutUSERInput
}

export type CATEGORYUpdateOneWithoutUSERInput = {
  create?: CATEGORYCreateWithoutUSERInput
  connect?: CATEGORYWhereUniqueInput
  disconnect?: boolean
  delete?: boolean
  update?: CATEGORYUpdateWithoutUSERDataInput
  upsert?: CATEGORYUpsertWithoutUSERInput
}

export type USERUpdateWithoutBOOKDataInput = {
  user_age?: number | null
  user_gender?: string | null
  user_ID?: string
  user_name?: string
  user_password?: string
  user_phone?: string
  CATEGORY?: CATEGORYUpdateOneWithoutUSERInput
  LOG?: LOGUpdateManyWithoutUSERInput
  User_BOOK?: User_BOOKUpdateManyWithoutUSERInput
}

export type USERUpdateWithWhereUniqueWithoutBOOKInput = {
  where: USERWhereUniqueInput
  data: USERUpdateWithoutBOOKDataInput
}

export type USERScalarWhereInput = {
  user_age?: number | NullableIntFilter | null
  user_category?: number | NullableIntFilter | null
  user_gender?: string | NullableStringFilter | null
  user_ID?: string | StringFilter
  user_mindbook?: number | NullableIntFilter | null
  user_name?: string | StringFilter
  user_password?: string | StringFilter
  user_phone?: string | StringFilter
  LOG?: LOGFilter | null
  User_BOOK?: User_BOOKFilter | null
  AND?: Enumerable<USERScalarWhereInput>
  OR?: Enumerable<USERScalarWhereInput>
  NOT?: Enumerable<USERScalarWhereInput>
}

export type USERUpdateManyDataInput = {
  user_age?: number | null
  user_gender?: string | null
  user_ID?: string
  user_name?: string
  user_password?: string
  user_phone?: string
}

export type USERUpdateManyWithWhereNestedInput = {
  where: USERScalarWhereInput
  data: USERUpdateManyDataInput
}

export type USERUpsertWithWhereUniqueWithoutBOOKInput = {
  where: USERWhereUniqueInput
  update: USERUpdateWithoutBOOKDataInput
  create: USERCreateWithoutBOOKInput
}

export type USERUpdateManyWithoutBOOKInput = {
  create?: Enumerable<USERCreateWithoutBOOKInput>
  connect?: Enumerable<USERWhereUniqueInput>
  set?: Enumerable<USERWhereUniqueInput>
  disconnect?: Enumerable<USERWhereUniqueInput>
  delete?: Enumerable<USERWhereUniqueInput>
  update?: Enumerable<USERUpdateWithWhereUniqueWithoutBOOKInput>
  updateMany?: Enumerable<USERUpdateManyWithWhereNestedInput>
  deleteMany?: Enumerable<USERScalarWhereInput>
  upsert?: Enumerable<USERUpsertWithWhereUniqueWithoutBOOKInput>
}

export type BOOKUpdateWithoutLOG_BOOKToLOG_book_numDataInput = {
  book_author?: string | null
  book_name?: string
  book_num?: number
  book_picture?: string | null
  book_publisher?: string | null
  book_side_pic?: string | null
  book_year?: string | null
  CATEGORY?: CATEGORYUpdateOneRequiredWithoutBOOKInput
  LIB_OWN_BOOK?: LIB_OWN_BOOKUpdateManyWithoutBOOKInput
  LOG_BOOKToLOG_book_category?: LOGUpdateManyWithoutBOOK_BOOKToLOG_book_categoryInput
  USER?: USERUpdateManyWithoutBOOKInput
  User_BOOK?: User_BOOKUpdateManyWithoutBOOKInput
}

export type BOOKUpsertWithoutLOG_BOOKToLOG_book_numInput = {
  update: BOOKUpdateWithoutLOG_BOOKToLOG_book_numDataInput
  create: BOOKCreateWithoutLOG_BOOKToLOG_book_numInput
}

export type BOOKUpdateOneRequiredWithoutLOG_BOOKToLOG_book_numInput = {
  create?: BOOKCreateWithoutLOG_BOOKToLOG_book_numInput
  connect?: BOOKWhereUniqueInput
  update?: BOOKUpdateWithoutLOG_BOOKToLOG_book_numDataInput
  upsert?: BOOKUpsertWithoutLOG_BOOKToLOG_book_numInput
}

export type LOGUpdateWithoutBOOK_BOOKToLOG_book_categoryDataInput = {
  L_AI?: number
  search_time?: Date | string
  BOOK_BOOKToLOG_book_num?: BOOKUpdateOneRequiredWithoutLOG_BOOKToLOG_book_numInput
  USER?: USERUpdateOneRequiredWithoutLOGInput
}

export type LOGUpdateWithWhereUniqueWithoutBOOK_BOOKToLOG_book_categoryInput = {
  where: LOGWhereUniqueInput
  data: LOGUpdateWithoutBOOK_BOOKToLOG_book_categoryDataInput
}

export type LOGUpsertWithWhereUniqueWithoutBOOK_BOOKToLOG_book_categoryInput = {
  where: LOGWhereUniqueInput
  update: LOGUpdateWithoutBOOK_BOOKToLOG_book_categoryDataInput
  create: LOGCreateWithoutBOOK_BOOKToLOG_book_categoryInput
}

export type LOGUpdateManyWithoutBOOK_BOOKToLOG_book_categoryInput = {
  create?: Enumerable<LOGCreateWithoutBOOK_BOOKToLOG_book_categoryInput>
  connect?: Enumerable<LOGWhereUniqueInput>
  set?: Enumerable<LOGWhereUniqueInput>
  disconnect?: Enumerable<LOGWhereUniqueInput>
  delete?: Enumerable<LOGWhereUniqueInput>
  update?: Enumerable<LOGUpdateWithWhereUniqueWithoutBOOK_BOOKToLOG_book_categoryInput>
  updateMany?: Enumerable<LOGUpdateManyWithWhereNestedInput>
  deleteMany?: Enumerable<LOGScalarWhereInput>
  upsert?: Enumerable<LOGUpsertWithWhereUniqueWithoutBOOK_BOOKToLOG_book_categoryInput>
}

export type BOOKUpdateWithoutUSERDataInput = {
  book_author?: string | null
  book_name?: string
  book_num?: number
  book_picture?: string | null
  book_publisher?: string | null
  book_side_pic?: string | null
  book_year?: string | null
  CATEGORY?: CATEGORYUpdateOneRequiredWithoutBOOKInput
  LIB_OWN_BOOK?: LIB_OWN_BOOKUpdateManyWithoutBOOKInput
  LOG_BOOKToLOG_book_category?: LOGUpdateManyWithoutBOOK_BOOKToLOG_book_categoryInput
  LOG_BOOKToLOG_book_num?: LOGUpdateManyWithoutBOOK_BOOKToLOG_book_numInput
  User_BOOK?: User_BOOKUpdateManyWithoutBOOKInput
}

export type BOOKUpsertWithoutUSERInput = {
  update: BOOKUpdateWithoutUSERDataInput
  create: BOOKCreateWithoutUSERInput
}

export type BOOKUpdateOneWithoutUSERInput = {
  create?: BOOKCreateWithoutUSERInput
  connect?: BOOKWhereUniqueInput
  disconnect?: boolean
  delete?: boolean
  update?: BOOKUpdateWithoutUSERDataInput
  upsert?: BOOKUpsertWithoutUSERInput
}

export type USERUpdateWithoutCATEGORYDataInput = {
  user_age?: number | null
  user_gender?: string | null
  user_ID?: string
  user_name?: string
  user_password?: string
  user_phone?: string
  BOOK?: BOOKUpdateOneWithoutUSERInput
  LOG?: LOGUpdateManyWithoutUSERInput
  User_BOOK?: User_BOOKUpdateManyWithoutUSERInput
}

export type USERUpdateWithWhereUniqueWithoutCATEGORYInput = {
  where: USERWhereUniqueInput
  data: USERUpdateWithoutCATEGORYDataInput
}

export type USERUpsertWithWhereUniqueWithoutCATEGORYInput = {
  where: USERWhereUniqueInput
  update: USERUpdateWithoutCATEGORYDataInput
  create: USERCreateWithoutCATEGORYInput
}

export type USERUpdateManyWithoutCATEGORYInput = {
  create?: Enumerable<USERCreateWithoutCATEGORYInput>
  connect?: Enumerable<USERWhereUniqueInput>
  set?: Enumerable<USERWhereUniqueInput>
  disconnect?: Enumerable<USERWhereUniqueInput>
  delete?: Enumerable<USERWhereUniqueInput>
  update?: Enumerable<USERUpdateWithWhereUniqueWithoutCATEGORYInput>
  updateMany?: Enumerable<USERUpdateManyWithWhereNestedInput>
  deleteMany?: Enumerable<USERScalarWhereInput>
  upsert?: Enumerable<USERUpsertWithWhereUniqueWithoutCATEGORYInput>
}

export type CATEGORYUpdateWithoutBOOKDataInput = {
  category_name?: string
  category_num?: number
  USER?: USERUpdateManyWithoutCATEGORYInput
}

export type CATEGORYUpsertWithoutBOOKInput = {
  update: CATEGORYUpdateWithoutBOOKDataInput
  create: CATEGORYCreateWithoutBOOKInput
}

export type CATEGORYUpdateOneRequiredWithoutBOOKInput = {
  create?: CATEGORYCreateWithoutBOOKInput
  connect?: CATEGORYWhereUniqueInput
  update?: CATEGORYUpdateWithoutBOOKDataInput
  upsert?: CATEGORYUpsertWithoutBOOKInput
}

export type BOOKUpdateInput = {
  book_author?: string | null
  book_name?: string
  book_num?: number
  book_picture?: string | null
  book_publisher?: string | null
  book_side_pic?: string | null
  book_year?: string | null
  CATEGORY?: CATEGORYUpdateOneRequiredWithoutBOOKInput
  LIB_OWN_BOOK?: LIB_OWN_BOOKUpdateManyWithoutBOOKInput
  LOG_BOOKToLOG_book_category?: LOGUpdateManyWithoutBOOK_BOOKToLOG_book_categoryInput
  LOG_BOOKToLOG_book_num?: LOGUpdateManyWithoutBOOK_BOOKToLOG_book_numInput
  USER?: USERUpdateManyWithoutBOOKInput
  User_BOOK?: User_BOOKUpdateManyWithoutBOOKInput
}

export type BOOKUpdateManyMutationInput = {
  book_author?: string | null
  book_name?: string
  book_num?: number
  book_picture?: string | null
  book_publisher?: string | null
  book_side_pic?: string | null
  book_year?: string | null
}

export type CATEGORYCreateInput = {
  category_name: string
  category_num: number
  BOOK?: BOOKCreateManyWithoutCATEGORYInput | null
  USER?: USERCreateManyWithoutCATEGORYInput | null
}

export type CATEGORYUpdateInput = {
  category_name?: string
  category_num?: number
  BOOK?: BOOKUpdateManyWithoutCATEGORYInput
  USER?: USERUpdateManyWithoutCATEGORYInput
}

export type CATEGORYUpdateManyMutationInput = {
  category_name?: string
  category_num?: number
}

export type BOOKCreateWithoutLIB_OWN_BOOKInput = {
  book_author?: string | null
  book_name: string
  book_picture?: string | null
  book_publisher?: string | null
  book_side_pic?: string | null
  book_year?: string | null
  CATEGORY: CATEGORYCreateOneWithoutBOOKInput
  LOG_BOOKToLOG_book_category?: LOGCreateManyWithoutBOOK_BOOKToLOG_book_categoryInput | null
  LOG_BOOKToLOG_book_num?: LOGCreateManyWithoutBOOK_BOOKToLOG_book_numInput | null
  USER?: USERCreateManyWithoutBOOKInput | null
  User_BOOK?: User_BOOKCreateManyWithoutBOOKInput | null
}

export type BOOKCreateOneWithoutLIB_OWN_BOOKInput = {
  create?: BOOKCreateWithoutLIB_OWN_BOOKInput
  connect?: BOOKWhereUniqueInput
}

export type LIB_OWN_BOOKCreateWithoutLIBRARYInput = {
  book_sector: string
  retention: string
  BOOK: BOOKCreateOneWithoutLIB_OWN_BOOKInput
}

export type LIB_OWN_BOOKCreateManyWithoutLIBRARYInput = {
  create?: Enumerable<LIB_OWN_BOOKCreateWithoutLIBRARYInput>
  connect?: Enumerable<LIB_OWN_BOOKWhereUniqueInput>
}

export type LIBRARYCreateInput = {
  lib_location?: string | null
  lib_name?: string | null
  lib_phone?: string | null
  LIB_OWN_BOOK?: LIB_OWN_BOOKCreateManyWithoutLIBRARYInput | null
}

export type BOOKUpdateWithoutLIB_OWN_BOOKDataInput = {
  book_author?: string | null
  book_name?: string
  book_num?: number
  book_picture?: string | null
  book_publisher?: string | null
  book_side_pic?: string | null
  book_year?: string | null
  CATEGORY?: CATEGORYUpdateOneRequiredWithoutBOOKInput
  LOG_BOOKToLOG_book_category?: LOGUpdateManyWithoutBOOK_BOOKToLOG_book_categoryInput
  LOG_BOOKToLOG_book_num?: LOGUpdateManyWithoutBOOK_BOOKToLOG_book_numInput
  USER?: USERUpdateManyWithoutBOOKInput
  User_BOOK?: User_BOOKUpdateManyWithoutBOOKInput
}

export type BOOKUpsertWithoutLIB_OWN_BOOKInput = {
  update: BOOKUpdateWithoutLIB_OWN_BOOKDataInput
  create: BOOKCreateWithoutLIB_OWN_BOOKInput
}

export type BOOKUpdateOneRequiredWithoutLIB_OWN_BOOKInput = {
  create?: BOOKCreateWithoutLIB_OWN_BOOKInput
  connect?: BOOKWhereUniqueInput
  update?: BOOKUpdateWithoutLIB_OWN_BOOKDataInput
  upsert?: BOOKUpsertWithoutLIB_OWN_BOOKInput
}

export type LIB_OWN_BOOKUpdateWithoutLIBRARYDataInput = {
  book_sector?: string
  LOB_AI?: number
  retention?: string
  BOOK?: BOOKUpdateOneRequiredWithoutLIB_OWN_BOOKInput
}

export type LIB_OWN_BOOKUpdateWithWhereUniqueWithoutLIBRARYInput = {
  where: LIB_OWN_BOOKWhereUniqueInput
  data: LIB_OWN_BOOKUpdateWithoutLIBRARYDataInput
}

export type LIB_OWN_BOOKUpsertWithWhereUniqueWithoutLIBRARYInput = {
  where: LIB_OWN_BOOKWhereUniqueInput
  update: LIB_OWN_BOOKUpdateWithoutLIBRARYDataInput
  create: LIB_OWN_BOOKCreateWithoutLIBRARYInput
}

export type LIB_OWN_BOOKUpdateManyWithoutLIBRARYInput = {
  create?: Enumerable<LIB_OWN_BOOKCreateWithoutLIBRARYInput>
  connect?: Enumerable<LIB_OWN_BOOKWhereUniqueInput>
  set?: Enumerable<LIB_OWN_BOOKWhereUniqueInput>
  disconnect?: Enumerable<LIB_OWN_BOOKWhereUniqueInput>
  delete?: Enumerable<LIB_OWN_BOOKWhereUniqueInput>
  update?: Enumerable<LIB_OWN_BOOKUpdateWithWhereUniqueWithoutLIBRARYInput>
  updateMany?: Enumerable<LIB_OWN_BOOKUpdateManyWithWhereNestedInput>
  deleteMany?: Enumerable<LIB_OWN_BOOKScalarWhereInput>
  upsert?: Enumerable<LIB_OWN_BOOKUpsertWithWhereUniqueWithoutLIBRARYInput>
}

export type LIBRARYUpdateInput = {
  lib_location?: string | null
  lib_name?: string | null
  lib_num?: number
  lib_phone?: string | null
  LIB_OWN_BOOK?: LIB_OWN_BOOKUpdateManyWithoutLIBRARYInput
}

export type LIBRARYUpdateManyMutationInput = {
  lib_location?: string | null
  lib_name?: string | null
  lib_num?: number
  lib_phone?: string | null
}

export type LIB_OWN_BOOKCreateInput = {
  book_sector: string
  retention: string
  BOOK: BOOKCreateOneWithoutLIB_OWN_BOOKInput
  LIBRARY: LIBRARYCreateOneWithoutLIB_OWN_BOOKInput
}

export type LIB_OWN_BOOKUpdateInput = {
  book_sector?: string
  LOB_AI?: number
  retention?: string
  BOOK?: BOOKUpdateOneRequiredWithoutLIB_OWN_BOOKInput
  LIBRARY?: LIBRARYUpdateOneRequiredWithoutLIB_OWN_BOOKInput
}

export type LIB_OWN_BOOKUpdateManyMutationInput = {
  book_sector?: string
  LOB_AI?: number
  retention?: string
}

export type LOGCreateInput = {
  search_time?: Date | string
  BOOK_BOOKToLOG_book_category: BOOKCreateOneWithoutLOG_BOOKToLOG_book_categoryInput
  BOOK_BOOKToLOG_book_num: BOOKCreateOneWithoutLOG_BOOKToLOG_book_numInput
  USER: USERCreateOneWithoutLOGInput
}

export type LOGUpdateInput = {
  L_AI?: number
  search_time?: Date | string
  BOOK_BOOKToLOG_book_category?: BOOKUpdateOneRequiredWithoutLOG_BOOKToLOG_book_categoryInput
  BOOK_BOOKToLOG_book_num?: BOOKUpdateOneRequiredWithoutLOG_BOOKToLOG_book_numInput
  USER?: USERUpdateOneRequiredWithoutLOGInput
}

export type LOGUpdateManyMutationInput = {
  L_AI?: number
  search_time?: Date | string
}

export type USERCreateInput = {
  user_age?: number | null
  user_gender?: string | null
  user_ID: string
  user_name: string
  user_password: string
  user_phone: string
  CATEGORY?: CATEGORYCreateOneWithoutUSERInput | null
  BOOK?: BOOKCreateOneWithoutUSERInput | null
  LOG?: LOGCreateManyWithoutUSERInput | null
  User_BOOK?: User_BOOKCreateManyWithoutUSERInput | null
}

export type USERUpdateInput = {
  user_age?: number | null
  user_gender?: string | null
  user_ID?: string
  user_name?: string
  user_password?: string
  user_phone?: string
  CATEGORY?: CATEGORYUpdateOneWithoutUSERInput
  BOOK?: BOOKUpdateOneWithoutUSERInput
  LOG?: LOGUpdateManyWithoutUSERInput
  User_BOOK?: User_BOOKUpdateManyWithoutUSERInput
}

export type USERUpdateManyMutationInput = {
  user_age?: number | null
  user_gender?: string | null
  user_ID?: string
  user_name?: string
  user_password?: string
  user_phone?: string
}

export type User_BOOKCreateInput = {
  comment?: string | null
  rating_scale?: number | null
  BOOK: BOOKCreateOneWithoutUser_BOOKInput
  USER: USERCreateOneWithoutUser_BOOKInput
}

export type User_BOOKUpdateInput = {
  comment?: string | null
  rating_scale?: number | null
  user_book_AI?: number
  BOOK?: BOOKUpdateOneRequiredWithoutUser_BOOKInput
  USER?: USERUpdateOneRequiredWithoutUser_BOOKInput
}

export type User_BOOKUpdateManyMutationInput = {
  comment?: string | null
  rating_scale?: number | null
  user_book_AI?: number
}

export type IntFilter = {
  equals?: number
  not?: number | IntFilter
  in?: Enumerable<number>
  notIn?: Enumerable<number>
  lt?: number
  lte?: number
  gt?: number
  gte?: number
}

export type DateTimeFilter = {
  equals?: Date | string
  not?: Date | string | DateTimeFilter
  in?: Enumerable<Date | string>
  notIn?: Enumerable<Date | string>
  lt?: Date | string
  lte?: Date | string
  gt?: Date | string
  gte?: Date | string
}

export type StringFilter = {
  equals?: string
  not?: string | StringFilter
  in?: Enumerable<string>
  notIn?: Enumerable<string>
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
}

export type NullableStringFilter = {
  equals?: string | null
  not?: string | null | NullableStringFilter
  in?: Enumerable<string> | null
  notIn?: Enumerable<string> | null
  lt?: string | null
  lte?: string | null
  gt?: string | null
  gte?: string | null
  contains?: string | null
  startsWith?: string | null
  endsWith?: string | null
}

export type NullableFloatFilter = {
  equals?: number | null
  not?: number | null | NullableFloatFilter
  in?: Enumerable<number> | null
  notIn?: Enumerable<number> | null
  lt?: number | null
  lte?: number | null
  gt?: number | null
  gte?: number | null
}

export type NullableIntFilter = {
  equals?: number | null
  not?: number | null | NullableIntFilter
  in?: Enumerable<number> | null
  notIn?: Enumerable<number> | null
  lt?: number | null
  lte?: number | null
  gt?: number | null
  gte?: number | null
}

export type LOGFilter = {
  every?: LOGWhereInput
  some?: LOGWhereInput
  none?: LOGWhereInput
}

export type User_BOOKFilter = {
  every?: User_BOOKWhereInput
  some?: User_BOOKWhereInput
  none?: User_BOOKWhereInput
}

export type BOOKFilter = {
  every?: BOOKWhereInput
  some?: BOOKWhereInput
  none?: BOOKWhereInput
}

export type USERFilter = {
  every?: USERWhereInput
  some?: USERWhereInput
  none?: USERWhereInput
}

export type LIB_OWN_BOOKFilter = {
  every?: LIB_OWN_BOOKWhereInput
  some?: LIB_OWN_BOOKWhereInput
  none?: LIB_OWN_BOOKWhereInput
}

export type BOOKOrderByInput = {
  book_author?: OrderByArg | null
  book_category?: OrderByArg | null
  book_name?: OrderByArg | null
  book_num?: OrderByArg | null
  book_picture?: OrderByArg | null
  book_publisher?: OrderByArg | null
  book_side_pic?: OrderByArg | null
  book_year?: OrderByArg | null
}

export type USEROrderByInput = {
  user_age?: OrderByArg | null
  user_category?: OrderByArg | null
  user_gender?: OrderByArg | null
  user_ID?: OrderByArg | null
  user_mindbook?: OrderByArg | null
  user_name?: OrderByArg | null
  user_password?: OrderByArg | null
  user_phone?: OrderByArg | null
}

export type LOGOrderByInput = {
  book_category?: OrderByArg | null
  book_num?: OrderByArg | null
  L_AI?: OrderByArg | null
  search_time?: OrderByArg | null
  user_ID?: OrderByArg | null
}

export type User_BOOKOrderByInput = {
  book_num?: OrderByArg | null
  comment?: OrderByArg | null
  rating_scale?: OrderByArg | null
  user_book_AI?: OrderByArg | null
  user_ID?: OrderByArg | null
}

export type LIB_OWN_BOOKOrderByInput = {
  book_num?: OrderByArg | null
  book_sector?: OrderByArg | null
  lib_num?: OrderByArg | null
  LOB_AI?: OrderByArg | null
  retention?: OrderByArg | null
}

export type CATEGORYOrderByInput = {
  category_name?: OrderByArg | null
  category_num?: OrderByArg | null
}

export type LIBRARYOrderByInput = {
  lib_location?: OrderByArg | null
  lib_name?: OrderByArg | null
  lib_num?: OrderByArg | null
  lib_phone?: OrderByArg | null
}

/**
 * Batch Payload for updateMany & deleteMany
 */

export type BatchPayload = {
  count: number
}

/**
 * DMMF
 */
export declare const dmmf: DMMF.Document;
export {};
